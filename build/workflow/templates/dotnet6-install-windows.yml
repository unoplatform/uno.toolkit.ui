parameters:
  DotNetVersion: '6.0.300'
  UnoCheck_Version: '1.4.1'
  UnoCheck_Manifest: 'https://raw.githubusercontent.com/unoplatform/uno.check/b58b891361591bc19d856dea0fbe15ff213e5f50/manifests/uno.ui-preview.manifest.json'

steps:

  # Required until .NET 6 installs properly on Windows using UseDotnet
  # using preview builds
  # - powershell: |
  #     $ProgressPreference = 'SilentlyContinue'
  #     Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
  #     & .\dotnet-install.ps1 -Version ${{ parameters.DotNetVersion }} -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
  #     & dotnet --list-sdks
  #   displayName: Install .NET ${{ parameters.DotNetVersion }}
  #   errorActionPreference: stop
  #   retryCountOnTaskFailure: 3
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK ${{ parameters.DotNetVersion }}'
    retryCountOnTaskFailure: 3
    inputs:
      packageType: sdk
      version: ${{ parameters.DotNetVersion }}
      includePreviewVersions: true

  - template: jdk-setup.yml
    
  - powershell: |
      & dotnet tool update --global uno.check --version ${{ parameters.UnoCheck_Version }} --add-source https://api.nuget.org/v3/index.json
      & uno-check -v --ci --non-interactive --fix --skip xcode --skip gtk3 --skip vswin --skip vsmac --manifest ${{ parameters.UnoCheck_Manifest }}
    displayName: Install .NET Workloads
    errorActionPreference: continue
    ignoreLASTEXITCODE: true
    retryCountOnTaskFailure: 3

  # https://github.com/actions/runner-images/issues/6082#issuecomment-1215100175
  - powershell: |
      Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
      $componentsToAdd = @(
        "Component.Xamarin"
      )
      [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
      $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
      $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
      if ($process.ExitCode -eq 0)
      {
          Write-Host "components have been successfully added"
      }
      else
      {
          Write-Host "components were not installed"
          exit 1
      }
