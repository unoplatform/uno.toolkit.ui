<Project ToolsVersion="15.0">

	<!--
		Condition="'$(FrameworkLineage)' == 'UWP'"
		Condition="'$(FrameworkLineage)' == 'WinUI'"
	-->

	<PropertyGroup>
		<!-- We are not building any target in TargetFrameworkOverride, but only those that are supported and in the appropriate linage -->
		<!-- condition: add target if no override or the target is defined in override -->
		<TargetFrameworks Condition="'$(TargetFrameworkOverride)'=='' OR $(TargetFrameworkOverride.Contains('net8.0'))">$(TargetFrameworks);net8.0</TargetFrameworks>
		<TargetFrameworks Condition="('$(TargetFrameworkOverride)'=='' and '$(DisableMobileTargets)'=='') OR $(TargetFrameworkOverride.Contains('net8.0-ios'))">$(TargetFrameworks);net8.0-ios</TargetFrameworks>
		<TargetFrameworks Condition="('$(TargetFrameworkOverride)'=='' and '$(DisableMobileTargets)'=='') OR $(TargetFrameworkOverride.Contains('net8.0-macos'))">$(TargetFrameworks);net8.0-macos</TargetFrameworks>
		<TargetFrameworks Condition="('$(TargetFrameworkOverride)'=='' and '$(DisableMobileTargets)'=='') OR $(TargetFrameworkOverride.Contains('net8.0-android'))">$(TargetFrameworks);net8.0-android</TargetFrameworks>
		<TargetFrameworks Condition="('$(TargetFrameworkOverride)'=='' and '$(DisableMobileTargets)'=='') OR $(TargetFrameworkOverride.Contains('net8.0-maccatalyst'))">$(TargetFrameworks);net8.0-maccatalyst</TargetFrameworks>
		<!-- condition: in addition to the above condition, we ALSO check if the right FrameworkLineage is given and that we are building on window machine -->
		<TargetFrameworks Condition="'$(FrameworkLineage)' == 'UWP' AND $([MSBuild]::IsOSPlatform('windows')) AND ('$(TargetFrameworkOverride)'=='' OR $(TargetFrameworkOverride.Contains('uap10.0.19041')))">$(TargetFrameworks);uap10.0.19041</TargetFrameworks>
		<TargetFrameworks Condition="'$(FrameworkLineage)' == 'WINUI' AND $([MSBuild]::IsOSPlatform('windows')) AND ('$(TargetFrameworkOverride)'=='' OR $(TargetFrameworkOverride.Contains('net8.0-windows10.0.19041')))">$(TargetFrameworks);net8.0-windows10.0.19041</TargetFrameworks>

		<AssemblyName>Uno.Toolkit.RuntimeTests</AssemblyName>
		<RootNamespace>Uno.Toolkit.RuntimeTests</RootNamespace>
		<IsPackable>false</IsPackable>

		<DefineConstants Condition="'$(FrameworkLineage)' == 'UWP'">$(DefineConstants);IS_UWP</DefineConstants>
		<DefineConstants Condition="'$(FrameworkLineage)' == 'WinUI'">$(DefineConstants);IS_WINUI</DefineConstants>
		<DefineConstants Condition="$(_IsWindowsWinUI)">$(DefineConstants);WINDOWS_WINUI</DefineConstants>
	</PropertyGroup>


	<ItemGroup>
		<PackageReference Include="Microsoft.UI.Xaml" Condition="$(_IsWindowsUWP)" />
		<PackageReference Include="Microsoft.WindowsAppSDK" Condition="$(_IsWindowsWinUI)" />
		<PackageReference Include="Microsoft.Windows.SDK.BuildTools" Condition="$(_IsWindowsWinUI)" />

		<PackageReference Include="Uno.UI" Condition="'$(FrameworkLineage)' == 'UWP'" />
		<PackageReference Include="Uno.WinUI" Condition="'$(FrameworkLineage)' == 'WinUI'" />
		<PackageReference Include="Uno.UI.RuntimeTests.Engine" />
		<PackageReference Include="MSTest.TestFramework" />
		<PackageReference Include="FluentAssertions" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\Uno.Toolkit.UI\Uno.Toolkit.UI.csproj" Condition="'$(FrameworkLineage)' == 'UWP'" />
		<ProjectReference Include="..\Uno.Toolkit.UI\Uno.Toolkit.WinUI.csproj" Condition="'$(FrameworkLineage)' == 'WinUI'" />
		<Reference Include="System.Xml.Linq" />
	</ItemGroup>

</Project>
