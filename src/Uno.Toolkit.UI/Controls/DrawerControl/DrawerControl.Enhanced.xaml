<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:utu="using:Uno.Toolkit.UI"
					xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
					xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives"
					xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,4)"
					xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"
					xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)"
					xmlns:primitiveContract7Present="using:Microsoft.UI.Xaml.Controls.Primitives?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"
					xmlns:xamarin="http://uno.ui/xamarin"
					xmlns:todo="what should be done"
					mc:Ignorable="todo xamarin">

	<x:Double x:Key="PaneToggleButtonHeight">40</x:Double>
	<x:Double x:Key="NavigationViewPaneHeaderRowMinHeight">4</x:Double>
	<StaticResource x:Key="DrawerControlDrawerBackgroundBrush"
					ResourceKey="SystemControlBackgroundChromeMediumLowBrush" />
	<SolidColorBrush x:Key="SplitViewDrawerLightDismissOverlayBackgroundBrush"
					 Color="#99000000" />
	<SolidColorBrush x:Key="NavigationViewDrawerLightDismissOverlayBackgroundBrush"
					 Color="#99000000" />

	<Style x:Key="DrawerSplitViewStyle"
		   TargetType="SplitView">

		<!--#region These properties have no effect, as these behaviors are dictated by the DrawerControl.-->
		<Setter Property="DisplayMode"
				Value="Overlay" />
		<Setter Property="LightDismissOverlayMode"
				Value="On" />
		<Setter Property="PanePlacement"
				Value="Left" />
		<!--#endregion-->

		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="OpenPaneLength"
				Value="320" />

		<Setter Property="utu:DrawerControlBehavior.OpenDirection"
				Value="Right" />
		<Setter Property="utu:DrawerControlBehavior.DrawerBackground"
				Value="{StaticResource DrawerControlDrawerBackgroundBrush}" />
		<Setter Property="utu:DrawerControlBehavior.LightDismissOverlayBackground"
				Value="{StaticResource SplitViewDrawerLightDismissOverlayBackgroundBrush}" />
		<Setter Property="utu:DrawerControlBehavior.EdgeSwipeDetectionLength"
				Value="50" />
		<Setter Property="utu:DrawerControlBehavior.IsGestureEnabled"
				Value="True" />
		<Setter Property="utu:DrawerControlBehavior.FitToDrawerContent"
				Value="False" />

		<!-- Workaround for https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="utu:DrawerControlBehavior.DrawerBackground"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SplitView">
					<utu:DrawerControl IsOpen="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}"
									   DrawerBackground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.DrawerBackground)}"
									   DrawerDepth="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=OpenPaneLength, Mode=TwoWay}"
									   OpenDirection="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.OpenDirection)}"
									   LightDismissOverlayBackground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.LightDismissOverlayBackground)}"
									   EdgeSwipeDetectionLength="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.EdgeSwipeDetectionLength)}"
									   IsGestureEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.IsGestureEnabled)}"
									   FitToDrawerContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(utu:DrawerControlBehavior.FitToDrawerContent)}"
									   Background="{TemplateBinding Background}">
						<utu:DrawerControl.Content>
							<!-- workaround: required to prevent ios black screen when used inside a muxc:NavigationView -->
							<ContentControl Content="{TemplateBinding Content}"
											Background="{TemplateBinding Background}"
											HorizontalAlignment="Stretch"
											HorizontalContentAlignment="Stretch"
											VerticalAlignment="Stretch"
											VerticalContentAlignment="Stretch" />
						</utu:DrawerControl.Content>
						<utu:DrawerControl.DrawerContent>
							<Border Background="{TemplateBinding PaneBackground}">
								<ContentControl Content="{TemplateBinding Pane}"
												HorizontalAlignment="Stretch"
												HorizontalContentAlignment="Stretch"
												VerticalAlignment="Stretch"
												VerticalContentAlignment="Stretch" />
							</Border>
						</utu:DrawerControl.DrawerContent>
					</utu:DrawerControl>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DrawerNavigationViewStyle"
		   TargetType="muxc:NavigationView">

		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="PaneToggleButtonStyle"
				Value="{StaticResource PaneToggleButtonStyle}" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="CompactPaneLength"
				Value="{ThemeResource NavigationViewCompactPaneLength}" />

		<Setter Property="utu:DrawerControlBehavior.OpenDirection"
				Value="Right" />
		<Setter Property="utu:DrawerControlBehavior.DrawerBackground"
				Value="{StaticResource DrawerControlDrawerBackgroundBrush}" />
		<Setter Property="utu:DrawerControlBehavior.LightDismissOverlayBackground"
				Value="{StaticResource NavigationViewDrawerLightDismissOverlayBackgroundBrush}" />
		<Setter Property="utu:DrawerControlBehavior.EdgeSwipeDetectionLength"
				Value="50" />
		<Setter Property="utu:DrawerControlBehavior.IsGestureEnabled"
				Value="True" />
		<Setter Property="utu:DrawerControlBehavior.FitToDrawerContent"
				Value="False" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="muxc:NavigationView">
					<Grid x:Name="RootGrid"
						  Background="{TemplateBinding Background}">

						<!-- Content layouts -->
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>


							<ContentControl x:Name="PaneTitleOnTopPane"
											Height="5"
											VerticalAlignment="Stretch"
											HorizontalAlignment="Center"
											VerticalContentAlignment="Stretch"
											HorizontalContentAlignment="Center"
											Visibility="Collapsed" />

							<SplitView x:Name="RootSplitView"
									   Grid.Row="1"
									   Background="{TemplateBinding Background}"
									   OpenPaneLength="{TemplateBinding OpenPaneLength}"
									   PaneBackground="{ThemeResource NavigationViewDefaultPaneBackground}"
									   IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}"
									   utu:DrawerControlBehavior.OpenDirection="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.OpenDirection)}"
									   utu:DrawerControlBehavior.DrawerBackground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.DrawerBackground)}"
									   utu:DrawerControlBehavior.LightDismissOverlayBackground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.LightDismissOverlayBackground)}"
									   utu:DrawerControlBehavior.EdgeSwipeDetectionLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.EdgeSwipeDetectionLength)}"
									   utu:DrawerControlBehavior.IsGestureEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.IsGestureEnabled)}"
									   utu:DrawerControlBehavior.FitToDrawerContent="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(utu:DrawerControlBehavior.FitToDrawerContent)}"
									   Style="{StaticResource DrawerSplitViewStyle}">

								<SplitView.Pane>
									<Grid x:Name="PaneContentGrid"
										  HorizontalAlignment="Left"
										  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="0" />
											<!-- above button margin + back button space -->
											<RowDefinition x:Name="PaneContentGridToggleButtonRow"
														   Height="Auto"
														   MinHeight="{StaticResource NavigationViewPaneHeaderRowMinHeight}" />
											<RowDefinition Height="Auto" />
											<RowDefinition Height="Auto" />
											<RowDefinition Height="8" />
											<!-- above list margin -->
											<RowDefinition x:Name="ItemsContainerRow"
														   Height="*" />
										</Grid.RowDefinitions>

										<Grid x:Name="ContentPaneTopPadding"
											  Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />

										<Grid Grid.Row="2"
											  x:Name="PaneHeaderContentBorderWrapper"
											  MinHeight="{StaticResource NavigationViewPaneHeaderRowMinHeight}">
											<!-- TODO: Uno specific: MinHeight and x:Name used here as RowDefinifiont.MinHeight does not work (issue #4727) -->
											<Grid.RowDefinitions>
												<RowDefinition x:Name="PaneHeaderContentBorderRow" />
											</Grid.RowDefinitions>

											<Grid.ColumnDefinitions>
												<ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
												<ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>

											<ContentControl x:Name="PaneHeaderContentBorder"
															IsTabStop="False"
															VerticalContentAlignment="Stretch"
															HorizontalContentAlignment="Stretch"
															Grid.Column="2" />
										</Grid>

										<Grid x:Name="AutoSuggestArea"
											  Grid.Row="3"
											  Height="{ThemeResource NavigationViewTopPaneHeight}"
											  VerticalAlignment="Center">

											<ContentControl x:Name="PaneAutoSuggestBoxPresenter"
															Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}"
															IsTabStop="False"
															HorizontalContentAlignment="Stretch"
															VerticalContentAlignment="Center" />

											<Button x:Name="PaneAutoSuggestButton"
													Visibility="Collapsed"
													Style="{ThemeResource NavigationViewPaneSearchButtonStyle}"
													Width="{TemplateBinding CompactPaneLength}" />
										</Grid>

										<ContentControl x:Name="PaneCustomContentBorder"
														IsTabStop="False"
														VerticalContentAlignment="Stretch"
														HorizontalContentAlignment="Stretch"
														Grid.Row="4" />

										<!-- "Non header" content -->
										<Grid x:Name="ItemsContainerGrid"
											  Grid.Row="6"
											  Margin="0,0,0,8">
											<Grid.RowDefinitions>
												<RowDefinition x:Name="MenuItemsRow"
															   Height="Auto"
															   MinHeight="{ThemeResource NavigationViewItemOnLeftMinHeight}" />
												<!-- MenuItems -->
												<RowDefinition Height="*"
															   MinHeight="21" />
												<!-- Fill spacing -->
												<RowDefinition Height="Auto" />
												<!-- PaneFooter -->
												<RowDefinition x:Name="FooterItemsRow"
															   Height="Auto"
															   MinHeight="{ThemeResource NavigationViewItemOnLeftMinHeight}" />
												<!-- FooterItems -->
											</Grid.RowDefinitions>

											<!-- MenuItems -->
											<muxc:ItemsRepeaterScrollHost HorizontalAlignment="Stretch"
																		  VerticalAlignment="Stretch">
												<ScrollViewer x:Name="MenuItemsScrollViewer"
															  TabNavigation="Local"
															  VerticalScrollBarVisibility="Auto">
													<!-- Left nav ItemsRepeater -->
													<muxc:ItemsRepeater x:Name="MenuItemsHost"
																		AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
																		AutomationProperties.AccessibilityView="Content" />
												</ScrollViewer>
											</muxc:ItemsRepeaterScrollHost>

											<muxc:NavigationViewItemSeparator x:Name="VisualItemsSeparator"
																			  Grid.Row="1"
																			  VerticalAlignment="Center"
																			  Visibility="Collapsed"
																			  HorizontalAlignment="Stretch" />

											<!-- PaneFooter -->
											<ContentControl x:Name="FooterContentBorder"
															IsTabStop="False"
															VerticalContentAlignment="Stretch"
															HorizontalContentAlignment="Stretch"
															Grid.Row="2" />

											<!-- FooterItems -->
											<muxc:ItemsRepeaterScrollHost Grid.Row="3">
												<ScrollViewer x:Name="FooterItemsScrollViewer"
															  contract7Present:VerticalAnchorRatio="1">
													<muxc:ItemsRepeater x:Name="FooterMenuItemsHost"
																		AutomationProperties.AccessibilityView="Content" />
												</ScrollViewer>
											</muxc:ItemsRepeaterScrollHost>
										</Grid>
									</Grid>
								</SplitView.Pane>

								<SplitView.Content>
									<!-- note: the background is necessary for the DrawerControl to receive pointer events -->
									<Grid x:Name="ContentGrid"
										  Background="Transparent">
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="Auto" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>

										<Grid x:Name="ContentTopPadding"
											  Grid.ColumnSpan="2"
											  Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}"
											  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />

										<Grid x:Name="ContentLeftPadding"
											  Grid.Row="1" />

										<ContentControl x:Name="HeaderContent"
														Grid.Row="1"
														Grid.Column="1"
														MinHeight="{StaticResource PaneToggleButtonHeight}"
														IsTabStop="False"
														Content="{TemplateBinding Header}"
														ContentTemplate="{TemplateBinding HeaderTemplate}"
														VerticalContentAlignment="Stretch"
														HorizontalContentAlignment="Stretch"
														Style="{StaticResource NavigationViewTitleHeaderContentControlTextStyle}" />

										<ContentPresenter AutomationProperties.LandmarkType="Main"
														  Grid.Row="2"
														  Grid.ColumnSpan="2"
														  Content="{TemplateBinding Content}" />
									</Grid>
								</SplitView.Content>
							</SplitView>
						</Grid>

						<!-- Button grid -->
						<!--
							TODO: Uno Specific: Canvas.ZIndex is not implemented, so the
							button Grid is moved below the content SplitView in the template
						-->
						<Grid x:Name="PaneToggleButtonGrid"
							  Margin="0,0,0,8"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Top"
							  Canvas.ZIndex="100">

							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>

							<Grid x:Name="TogglePaneTopPadding"
								  Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />

							<Grid x:Name="ButtonHolderGrid"
								  Grid.Row="1">
								<Button x:Name="NavigationViewBackButton"
										VerticalAlignment="Top"
										IsEnabled="{TemplateBinding IsBackEnabled}"
										Style="{StaticResource NavigationBackButtonNormalStyle}"
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}">
									<ToolTipService.ToolTip>
										<ToolTip x:Name="NavigationViewBackButtonToolTip" />
									</ToolTipService.ToolTip>
								</Button>
								<Button x:Name="NavigationViewCloseButton"
										VerticalAlignment="Top"
										Style="{StaticResource NavigationBackButtonNormalStyle}">
									<ToolTipService.ToolTip>
										<ToolTip x:Name="NavigationViewCloseButtonToolTip" />
									</ToolTipService.ToolTip>
								</Button>
								<Button x:Name="TogglePaneButton"
										HorizontalAlignment="Center"
										VerticalAlignment="Top"
										AutomationProperties.LandmarkType="Navigation"
										Style="{TemplateBinding PaneToggleButtonStyle}"
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}">
									<TextBlock x:Name="PaneTitleTextBlock"
											   Grid.Column="0"
											   HorizontalAlignment="Left"
											   VerticalAlignment="Center"
											   Style="{StaticResource NavigationViewItemHeaderTextStyle}"
											   Text="{TemplateBinding PaneTitle}" />
								</Button>
								<Grid x:Name="PaneTitleHolder"
									  Visibility="Collapsed">
									<ContentControl x:Name="PaneTitlePresenter"
													Margin="{ThemeResource NavigationViewPaneTitlePresenterMargin}"
													HorizontalContentAlignment="Stretch"
													VerticalContentAlignment="Stretch"
													IsTabStop="False" />
								</Grid>
							</Grid>
						</Grid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="DisplayModeGroup" />

							<VisualStateGroup x:Name="TogglePaneGroup">
								<VisualState x:Name="TogglePaneButtonVisible" />
								<VisualState x:Name="TogglePaneButtonCollapsed" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="HeaderGroup">
								<VisualState x:Name="HeaderVisible" />
								<VisualState x:Name="HeaderCollapsed">
									<VisualState.Setters>
										<Setter Target="HeaderContent.Visibility"
												Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="AutoSuggestGroup" />

							<VisualStateGroup x:Name="PaneStateGroup">
								<VisualState x:Name="NotClosedCompact" />
								<VisualState x:Name="ClosedCompact">
									<VisualState.Setters>
										<Setter Target="PaneAutoSuggestBoxPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="PaneAutoSuggestButton.Visibility"
												Value="Visible" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="PaneStateListSizeGroup">
								<VisualState x:Name="ListSizeFull" />
								<VisualState x:Name="ListSizeCompact">
									<VisualState.Setters>
										<Setter Target="PaneContentGrid.Width"
												Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
										<Setter Target="PaneTitleTextBlock.Visibility"
												Value="Collapsed" />
										<Setter Target="PaneHeaderContentBorder.Visibility"
												Value="Collapsed" />
										<Setter Target="PaneCustomContentBorder.HorizontalAlignment"
												Value="Left" />
										<Setter Target="FooterContentBorder.HorizontalAlignment"
												Value="Left" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="TitleBarVisibilityGroup">
								<VisualState x:Name="TitleBarVisible" />
								<VisualState x:Name="TitleBarCollapsed">
									<VisualState.Setters>
										<Setter Target="PaneContentGrid.Margin"
												Value="0,32,0,0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="OverflowLabelGroup">
								<VisualState x:Name="OverflowButtonWithLabel" />
								<VisualState x:Name="OverflowButtonNoLabel" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="BackButtonGroup">
								<VisualState x:Name="BackButtonVisible" />
								<VisualState x:Name="BackButtonCollapsed">
									<VisualState.Setters>
										<Setter Target="BackButtonPlaceholderOnTopNav.Width"
												Value="0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="PaneVisibilityGroup">
								<VisualState x:Name="PaneVisible" />
								<VisualState x:Name="PaneCollapsed">
									<VisualState.Setters>
										<!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
										<!-- write it here and interfere. But these values work together to hide -->
										<!-- the left pane. -->
										<Setter Target="RootSplitView.CompactPaneLength"
												Value="0" />
										<Setter Target="PaneToggleButtonGrid.Visibility"
												Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
