<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d mobile not_win android ios wasm macos" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:um="using:Uno.Material" xmlns:toolkit="using:Uno.UI.Toolkit" xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mobile="http://uno.ui/mobile" xmlns:utu="using:Uno.Toolkit.UI" xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:not_win="http://uno.ui/not_win" xmlns:android="http://uno.ui/android" xmlns:ios="http://uno.ui/ios" xmlns:wasm="http://uno.ui/wasm" xmlns:macos="http://uno.ui/macos" xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,4)" xmlns:contract6Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,6)" xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:contract8Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,8)" xmlns:contract12Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,12)" xmlns:contract12NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,12)" xmlns:contract6NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,6)" xmlns:contract5NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,5)" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <ResourceDictionary.MergedDictionaries>
    <um:MaterialFonts />
    <um:MaterialColors />
  </ResourceDictionary.MergedDictionaries>
  <!--origin: Styles\Controls\v1\BottomTabBar.xaml-->
  <StaticResource x:Key="MaterialBottomTabBarBackground" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackgroundSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackgroundSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundPointerOver" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundPressed" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelected" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelectedPointerOver" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelectedPressed" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <SolidColorBrush x:Key="MaterialBottomTabBarItemForeground" Color="{ThemeResource MaterialOnPrimaryColor}" Opacity="0.70" />
  <x:Double x:Key="MaterialBottomTabBarFontSize">14</x:Double>
  <FontFamily x:Key="MaterialBottomTabBarFontFamily">Roboto</FontFamily>
  <x:Double x:Key="MaterialBottomTabBarHeight">64</x:Double>
  <GridLength x:Key="MaterialBottomTabBarGridLengthHeight">64</GridLength>
  <x:Double x:Key="FabItemVerticalOffset">-32</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemIconHeight">22</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemIconWidth">22</x:Double>
  <Thickness x:Key="MaterialBottomTabBarItemContentMargin">0,0,0,6</Thickness>
  <Thickness x:Key="MaterialBottomTabBarItemContentOnlyMargin">12,0</Thickness>
  <x:Double x:Key="AjustedMaterialBottomTabBarHeight">92</x:Double>
  <mobile:Style x:Key="MaterialBottomTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Bottom" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialBottomTabBarItemStyle}" />
    <!-- Workaround until this issue is fixed, can be removed after -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <!-- Code can be uncommented when this issue is fixed in Uno: -->
          <!-- https://github.com/unoplatform/uno/issues/7393 -->
          <!--<Grid x:Name="TabBarGrid"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Padding="{TemplateBinding Padding}">
						<ItemsPresenter Height="{StaticResource MaterialBottomTabBarHeight}" />
					</Grid>-->
          <!-- Workaround until the above issue is fixed, can be removed after -->
          <Grid x:Name="TabBarGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="{StaticResource MaterialBottomTabBarGridLengthHeight}" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Grid.Row="1" x:Name="BackgroundBorder" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" Height="{StaticResource MaterialBottomTabBarHeight}" />
            <ItemsPresenter Grid.RowSpan="2" Height="{StaticResource AjustedMaterialBottomTabBarHeight}" />
            <Border Grid.Row="2" x:Name="VisibleBoundsBorder" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <mobile:Style x:Key="MaterialBottomTabBarItemFabStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialSecondaryBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnSecondaryBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialBottomTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialBottomTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="IsSelectable" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabLargeCorderRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabLargePadding}" />
    <!-- Code can be uncommented when this issue is fixed in Uno: -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <!--<Setter Property="RenderTransform">
			<Setter.Value>
				<TranslateTransform Y="{StaticResource FabItemVerticalOffset}" />
			</Setter.Value>
		</Setter>-->
    <!-- Workaround until the above issue is fixed, can be removed after -->
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Elevation="6" HorizontalAlignment="Center" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                  <StackPanel x:Name="ContentPanel" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                    <!-- Icon -->
                    <Viewbox Height="{StaticResource MaterialFabContentWidthOrHeight}" Width="{StaticResource MaterialFabContentWidthOrHeight}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter Content="{TemplateBinding Icon}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!-- Icon/Content spacing -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{StaticResource MaterialButtonCornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </StackPanel>
                  <Border x:Name="FabFocusBorder" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource ButtonFabLowFabBackgroundColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <mobile:Style x:Key="MaterialBottomTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialBottomTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialBottomTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialBottomTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <!-- Workaround with these two properties until this issue is fixed, can be removed after -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <Setter Property="Height" Value="{StaticResource MaterialBottomTabBarHeight}" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialBottomTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Height" Value="0" />
                    <Setter Target="ContentRow.Height" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Feedback="{ThemeResource MaterialOnPrimaryBrush}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="IconRow" Height="*" />
                      <RowDefinition x:Name="ContentRow" Height="Auto" />
                    </Grid.RowDefinitions>
                    <Viewbox x:Name="IconBox" Height="{StaticResource MaterialBottomTabBarItemIconHeight}" Width="{StaticResource MaterialBottomTabBarItemIconWidth}">
                      <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" TextWrapping="NoWrap" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Margin="{StaticResource MaterialBottomTabBarItemContentMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialBottomTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Bottom" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialBottomTabBarItemStyle}" />
    <!-- Workaround until this issue is fixed, can be removed after -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <!-- Code can be uncommented when this issue is fixed in Uno: -->
          <!-- https://github.com/unoplatform/uno/issues/7393 -->
          <!--<Grid x:Name="TabBarGrid"	
						  Background="{TemplateBinding Background}"	
						  BorderBrush="{TemplateBinding BorderBrush}"	
						  BorderThickness="{TemplateBinding BorderThickness}"	
						  Padding="{TemplateBinding Padding}">	
						<ItemsPresenter Height="{StaticResource MaterialBottomTabBarHeight}" />	
					</Grid>-->
          <!-- Workaround until the above issue is fixed, can be removed after -->
          <Grid x:Name="TabBarGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="{StaticResource MaterialBottomTabBarGridLengthHeight}" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Grid.Row="1" x:Name="BackgroundBorder" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" Height="{StaticResource MaterialBottomTabBarHeight}" />
            <ItemsPresenter Grid.RowSpan="2" Height="{StaticResource AjustedMaterialBottomTabBarHeight}" />
            <Border Grid.Row="2" x:Name="VisibleBoundsBorder" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialBottomTabBarItemFabStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialSecondaryBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnSecondaryBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialBottomTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialBottomTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="IsSelectable" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabLargeCorderRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabLargePadding}" />
    <!-- Code can be uncommented when this issue is fixed in Uno: -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <!--<Setter Property="RenderTransform">	
			<Setter.Value>	
				<TranslateTransform Y="{StaticResource FabItemVerticalOffset}" />	
			</Setter.Value>	
		</Setter>-->
    <!-- Workaround until the above issue is fixed, can be removed after -->
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Elevation="6" HorizontalAlignment="Center" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                  <StackPanel x:Name="ContentPanel" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                    <!-- Icon -->
                    <Viewbox Height="{StaticResource MaterialFabContentWidthOrHeight}" Width="{StaticResource MaterialFabContentWidthOrHeight}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter Content="{TemplateBinding Icon}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!-- Icon/Content spacing -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{StaticResource MaterialButtonCornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </StackPanel>
                  <Border x:Name="FabFocusBorder" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource ButtonFabLowFabBackgroundColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialBottomTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialBottomTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialBottomTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialBottomTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <!-- Workaround with these two properties until this issue is fixed, can be removed after -->
    <!-- https://github.com/unoplatform/uno/issues/7393 -->
    <Setter Property="Height" Value="{StaticResource MaterialBottomTabBarHeight}" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialBottomTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialBottomTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Height" Value="0" />
                    <Setter Target="ContentRow.Height" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Feedback="{ThemeResource MaterialOnPrimaryBrush}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="IconRow" Height="*" />
                      <RowDefinition x:Name="ContentRow" Height="Auto" />
                    </Grid.RowDefinitions>
                    <Viewbox x:Name="IconBox" Height="{StaticResource MaterialBottomTabBarItemIconHeight}" Width="{StaticResource MaterialBottomTabBarItemIconWidth}">
                      <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" TextWrapping="NoWrap" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Margin="{StaticResource MaterialBottomTabBarItemContentMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <!--origin: Styles\Controls\v1\Card.xaml-->
  <CornerRadius x:Key="MaterialCardCornerRadius">4</CornerRadius>
  <Thickness x:Key="MaterialCardBorderThickness">1</Thickness>
  <x:Double x:Key="MaterialCardElevation">6</x:Double>
  <Thickness x:Key="MaterialCardElevationMargin">6</Thickness>
  <DataTemplate x:Key="DefaultHeaderContentTemplate">
    <TextBlock Text="{Binding}" MaxLines="1" Margin="16,14,16,0" Style="{ThemeResource MaterialHeadline6}" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultSubHeaderContentTemplate">
    <TextBlock Text="{Binding}" MaxLines="2" Margin="16,0,16,14" Style="{ThemeResource MaterialBody2}" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultSupportingContentTemplate">
    <TextBlock Text="{Binding}" Margin="16,0,16,14" Style="{ThemeResource MaterialBody2}" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultAvatarSupportingContentTemplate">
    <TextBlock Text="{Binding}" Margin="16,12,16,14" Style="{ThemeResource MaterialBody2}" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultSmallMediaSupportingContentTemplate">
    <Border BorderThickness="0,1,0,0" BorderBrush="{StaticResource MaterialOnSurfaceFocusedBrush}">
      <TextBlock Text="{Binding}" Margin="16,12,16,14" Style="{ThemeResource MaterialBody2}" />
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="DefaultMediaContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="194" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultSmallMediaContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="94" VerticalAlignment="Top" />
  </DataTemplate>
  <DataTemplate x:Key="DefaultAvatarContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="40" />
  </DataTemplate>
  <Style x:Key="MaterialBaseCardStyle" TargetType="utu:Card">
    <Setter Property="HeaderContentTemplate" Value="{StaticResource DefaultHeaderContentTemplate}" />
    <Setter Property="SubHeaderContentTemplate" Value="{StaticResource DefaultSubHeaderContentTemplate}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource DefaultSupportingContentTemplate}" />
    <Setter Property="MediaContentTemplate" Value="{StaticResource DefaultMediaContentTemplate}" />
  </Style>
  <Style x:Key="MaterialOutlinedCardStyle" TargetType="utu:Card" BasedOn="{StaticResource MaterialBaseCardStyle}">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Padding" Value="16,14" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Border for PointerOver State  -->
            <Border Grid.RowSpan="4" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border Grid.RowSpan="4" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Media content part  -->
            <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Header part  -->
            <ContentPresenter Grid.Row="1" x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  SubHeader part  -->
            <ContentPresenter Grid.Row="2" x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="4" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Row="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialElevatedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Padding" Value="16,14" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!--  Border for PointerOver State  -->
              <Border Grid.RowSpan="4" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border Grid.RowSpan="4" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Media content part  -->
              <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Header part  -->
              <ContentPresenter Grid.Row="1" x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter Grid.Row="2" x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="4" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Row="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialAvatarOutlinedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Padding" Value="16,14" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource DefaultAvatarSupportingContentTemplate}" />
    <Setter Property="AvatarContentTemplate" Value="{StaticResource DefaultAvatarContentTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  Border for PointedOver state  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focus state  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Avatart part  -->
            <ContentPresenter x:Name="AvatarContentPresenter" Content="{TemplateBinding AvatarContent}" ContentTemplate="{TemplateBinding AvatarContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Margin="16,0,0,0" Visibility="{Binding AvatarContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <StackPanel Grid.Column="1" IsHitTestVisible="False">
              <!--  Header part  -->
              <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </StackPanel>
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Column="2" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Media content part  -->
            <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialAvatarElevatedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Padding" Value="16,14" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource DefaultAvatarSupportingContentTemplate}" />
    <Setter Property="AvatarContentTemplate" Value="{StaticResource DefaultAvatarContentTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!--  Border for PointedOver state  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focus state  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Avatart part  -->
              <ContentPresenter x:Name="AvatarContentPresenter" Content="{TemplateBinding AvatarContent}" ContentTemplate="{TemplateBinding AvatarContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Margin="16,0,0,0" Visibility="{Binding AvatarContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <StackPanel Grid.Column="1" IsHitTestVisible="False">
                <!--  Header part  -->
                <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
                <!--  SubHeader part  -->
                <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              </StackPanel>
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Column="2" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
              <!--  Media content part  -->
              <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallMediaOutlinedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MediaContentTemplate" Value="{StaticResource DefaultSmallMediaContentTemplate}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource DefaultSmallMediaSupportingContentTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  Border for PointerOver State  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Media content part  -->
            <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <StackPanel Grid.Column="1">
              <!--  Header part  -->
              <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </StackPanel>
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallMediaElevatedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="MediaContentTemplate" Value="{StaticResource DefaultSmallMediaContentTemplate}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource DefaultSmallMediaSupportingContentTemplate}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!--  Border for PointerOver State  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Media content part  -->
              <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <StackPanel Grid.Column="1">
                <!--  Header part  -->
                <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
                <!--  SubHeader part  -->
                <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              </StackPanel>
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\CardContentControl.xaml-->
  <Style x:Key="MaterialOutlinedCardContentControlStyle" TargetType="utu:CardContentControl">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:CardContentControl">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverPressed" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--  Ripple effect  -->
            <!-- Will add the ripple effect later on when this issue is taken care of: -->
            <!-- https://github.com/unoplatform/uno.ui.toolkit/issues/88 -->
            <!--<um:Ripple Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}"
										 BorderBrush="{TemplateBinding BorderBrush}"
										 BorderThickness="{TemplateBinding BorderThickness}"
										 CornerRadius="{StaticResource MaterialCardCornerRadius}"
										 Padding="{TemplateBinding Padding}"
										 AutomationProperties.AccessibilityView="Raw" />-->
            <!--  Main ContentPresenter  -->
            <ContentPresenter x:Name="ContentPresenter" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Border for Pressed State  -->
            <Border x:Name="HoverPressed" Background="{StaticResource MaterialOnSurfacePressedBrush}" IsHitTestVisible="False" Opacity="0" />
            <!--  Border for PointerOver State  -->
            <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" IsHitTestVisible="False" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" IsHitTestVisible="False" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialElevatedCardContentControlStyle" TargetType="utu:CardContentControl">
    <Setter Property="MinHeight" Value="72" />
    <Setter Property="MaxWidth" Value="344" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:CardContentControl">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverPressed" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <!--  Ripple effect  -->
              <!-- Will add the ripple effect later on when this issue is taken care of: -->
              <!-- https://github.com/unoplatform/uno.ui.toolkit/issues/88 -->
              <!--<um:Ripple Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}"
											 CornerRadius="{StaticResource MaterialCardCornerRadius}"
											 Padding="{TemplateBinding Padding}"
											 AutomationProperties.AccessibilityView="Raw" />-->
              <!--  Main ContentPresenter  -->
              <ContentPresenter x:Name="ContentPresenter" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Border for Pressed State  -->
              <Border x:Name="HoverPressed" Background="{StaticResource MaterialOnSurfacePressedBrush}" IsHitTestVisible="False" Opacity="0" />
              <!--  Border for PointerOver State  -->
              <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" IsHitTestVisible="False" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" IsHitTestVisible="False" Opacity="0" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\Chip.xaml-->
  <x:String x:Key="ClearGlyphPathData">M10.661012,7.5689991L7.5990001,10.650999 12.939089,15.997999 7.5990001,21.336999 10.661012,24.405 16.007082,19.065 21.369997,24.405 24.430058,21.336999 24.429081,21.336 19.088991,15.998999 24.429081,10.662001 21.345095,7.5819996 16.007082,12.919001z M15.997072,0C24.828983,0 31.994999,7.1770013 31.994999,15.999998 31.994999,24.826997 24.828007,31.999999 15.997072,31.999999 7.1569835,31.999999 1.5270052E-07,24.826997 0,15.999998 1.5270052E-07,7.1799997 7.1569835,0 15.997072,0z</x:String>
  <x:String x:Key="CheckGlyphPathStyle">M28.718018,0L32,3.2819897 10.666016,24.616999 0,13.951997 3.2810059,10.670007 10.666016,18.055033z</x:String>
  <x:Double x:Key="ChipHeight">32</x:Double>
  <x:Double x:Key="ChipElevation">8</x:Double>
  <x:Double x:Key="CheckGlyphHeight">12</x:Double>
  <CornerRadius x:Key="ChipCornerRadius">16</CornerRadius>
  <x:Double x:Key="IconSize">24</x:Double>
  <CornerRadius x:Key="IconCornerRadius">12</CornerRadius>
  <Style x:Name="DeleteButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="BorderRoot.BorderBrush" Value="{StaticResource MaterialOnSurfaceBrush}" />
                    <Setter Target="BorderRoot.BorderThickness" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="BorderRoot.BorderBrush" Value="{StaticResource MaterialOnSurfaceBrush}" />
                    <Setter Target="BorderRoot.BorderThickness" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BorderRoot" Height="16" Width="16" CornerRadius="8" Background="Transparent">
              <Path x:Name="GlyphElement" Data="{StaticResource ClearGlyphPathData}" Fill="{TemplateBinding Background}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="16" Height="16" AutomationProperties.AccessibilityView="Raw" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseMaterialFilledChipStyle" TargetType="utu:Chip">
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{StaticResource MaterialOnSurfacePressedBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="Height" Value="{StaticResource ChipHeight}" />
    <Setter Property="CornerRadius" Value="{StaticResource ChipCornerRadius}" />
    <Setter Property="Padding" Value="4,0" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceLowBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <Path x:Name="CheckGlyphElement" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Height="{StaticResource CheckGlyphHeight}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                    <!-- Remove button -->
                    <Button x:Name="PART_RemoveButton" Visibility="{Binding CanRemove, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}, FallbackValue=Collapsed}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Foreground}" Style="{StaticResource DeleteButtonStyle}" Margin="0,0,4,0" Grid.Column="2" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseMaterialOutlinedChipStyle" TargetType="utu:Chip">
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
    <Setter Property="Height" Value="{StaticResource ChipHeight}" />
    <Setter Property="CornerRadius" Value="{StaticResource ChipCornerRadius}" />
    <Setter Property="Padding" Value="4,0" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <Path x:Name="CheckGlyphElement" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Height="{StaticResource CheckGlyphHeight}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                    <!-- Remove button -->
                    <Button x:Name="PART_RemoveButton" Visibility="{Binding CanRemove, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}, FallbackValue=Collapsed}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Foreground}" Style="{StaticResource DeleteButtonStyle}" Margin="0,0,4,0" Grid.Column="2" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="MaterialFilledInputChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialFilledChipStyle}">
    <Style.Setters>
      <Setter Property="CanRemove" Value="True" />
      <Setter Property="IsCheckable" Value="True" />
    </Style.Setters>
  </Style>
  <Style x:Name="MaterialOutlinedInputChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialOutlinedChipStyle}">
    <Style.Setters>
      <Setter Property="CanRemove" Value="True" />
    </Style.Setters>
  </Style>
  <Style x:Key="MaterialFilledChoiceChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialFilledChipStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialOnSurfacePressedBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="IsCheckable" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryVariantLightBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryLowBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple x:Name="RippleRoot" Feedback="{StaticResource MaterialPrimaryFocusedBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedChoiceChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialOutlinedChipStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryFocusedBrush}" />
                    <Setter Target="ElevatedRoot.BorderBrush" Value="{StaticResource MaterialPrimaryVariantLightBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialPrimaryMediumBrush}" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryFocusedBrush}" />
                    <Setter Target="ElevatedRoot.BorderBrush" Value="{StaticResource MaterialPrimaryVariantLightBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialPrimaryFocusedBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple x:Name="RippleRoot" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledFilterChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialFilledChipStyle}">
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="IsCheckable" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceLowBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <Path x:Name="CheckGlyphElement" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Height="{StaticResource CheckGlyphHeight}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedFilterChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialOutlinedChipStyle}">
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="IsCheckable" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <Path x:Name="CheckGlyphElement" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Height="{StaticResource CheckGlyphHeight}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledActionChipStyle" TargetType="utu:Chip" BasedOn="{StaticResource BaseMaterialFilledChipStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceLowBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedActionChipStyle" BasedOn="{StaticResource BaseMaterialOutlinedChipStyle}" TargetType="utu:Chip">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="{StaticResource ChipElevation}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Opacity" Value="0.5" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <um:Ripple Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" ContentTemplate="{TemplateBinding IconTemplate}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" Height="{StaticResource IconSize}" Width="{StaticResource IconSize}" CornerRadius="{StaticResource IconCornerRadius}" AutomationProperties.AccessibilityView="Raw" />
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Margin="8,0" Grid.Column="1" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\ChipGroup.xaml-->
  <ItemsPanelTemplate x:Key="MaterialHorizontalChipGroupItemsPanel">
    <StackPanel Orientation="Horizontal" Spacing="8" />
  </ItemsPanelTemplate>
  <Style x:Key="BaseMaterialChipGroupStyle" TargetType="utu:ChipGroup">
    <Setter Property="ItemsPanel" Value="{StaticResource MaterialHorizontalChipGroupItemsPanel}" />
  </Style>
  <Style x:Key="MaterialFilledInputChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialFilledInputChipStyle}" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialOutlinedInputChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialOutlinedInputChipStyle}" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialFilledChoiceChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialFilledChoiceChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Single" />
  </Style>
  <Style x:Key="MaterialOutlinedChoiceChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialOutlinedChoiceChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Single" />
  </Style>
  <Style x:Key="MaterialFilledFilterChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialFilledFilterChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialOutlinedFilterChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialOutlinedFilterChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialFilledActionChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialFilledActionChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="None" />
  </Style>
  <Style x:Key="MaterialOutlinedActionChipGroupStyle" BasedOn="{StaticResource BaseMaterialChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialOutlinedActionChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="None" />
  </Style>
  <!--origin: Styles\Controls\v1\Divider.xaml-->
  <x:Double x:Key="MaterialDividerHeight">1</x:Double>
  <Style x:Key="MaterialDividerStyle" TargetType="utu:Divider">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
    <Setter Property="SubHeaderForeground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Divider">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Rectangle Fill="{TemplateBinding Foreground}" Height="{StaticResource MaterialDividerHeight}" />
            <TextBlock Text="{TemplateBinding SubHeader}" Visibility="{Binding SubHeader, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed}" Style="{StaticResource MaterialCaption}" Foreground="{TemplateBinding SubHeaderForeground}" Margin="0,4,0,0" Grid.Row="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\NavigationBar.xaml-->
  <mobile:Style x:Key="MaterialMainCommandStyle" BasedOn="{StaticResource BaseMaterialMainCommandStyle}" TargetType="AppBarButton" />
  <mobile:Style x:Key="MaterialModalMainCommandStyle" BasedOn="{StaticResource BaseMaterialModalMainCommandStyle}" TargetType="AppBarButton" />
  <mobile:Style x:Key="MaterialNavigationBarStyle" BasedOn="{StaticResource BaseMaterialNavigationBarStyle}" TargetType="utu:NavigationBar">
    <ios:Setter Property="Height" Value="NaN" />
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialMainCommandStyle}" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Top" />
    <Setter Property="Template" Value="{StaticResource NativeNavigationBarTemplate}" />
  </mobile:Style>
  <mobile:Style x:Key="MaterialModalNavigationBarStyle" BasedOn="{StaticResource BaseMaterialModalNavigationBarStyle}" TargetType="utu:NavigationBar">
    <ios:Setter Property="Height" Value="NaN" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Top" />
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialModalMainCommandStyle}" />
    <Setter Property="Template" Value="{StaticResource NativeNavigationBarTemplate}" />
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource BaseMaterialMainCommandStyle}">
    <Setter Property="Icon">
      <Setter.Value>
        <SymbolIcon Symbol="Back" />
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialNavigationBarStyle" TargetType="utu:NavigationBar" BasedOn="{StaticResource BaseMaterialNavigationBarStyle}">
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialMainCommandStyle}" />
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialModalMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource BaseMaterialModalMainCommandStyle}">
    <Setter Property="Icon">
      <Setter.Value>
        <SymbolIcon Symbol="Back" />
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialModalNavigationBarStyle" TargetType="utu:NavigationBar" BasedOn="{StaticResource BaseMaterialModalNavigationBarStyle}">
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialModalMainCommandStyle}" />
  </not_mobile:Style>
  <x:Double x:Key="MaterialNavigationBarElevation">4</x:Double>
  <x:Double x:Key="MaterialNavigationBarHeight">48</x:Double>
  <Thickness x:Key="MaterialNavigationBarContentMargin">16,0,0,0</Thickness>
  <Thickness x:Key="AppBarEllipsisButtonInnerBorderMargin">2,6,6,6</Thickness>
  <ios:ControlTemplate x:Key="NativeNavigationBarTemplate" TargetType="utu:NavigationBar">
    <Border BorderThickness="{TemplateBinding Padding}">
      <utu:NativeNavigationBarPresenter Height="44" x:Name="NavigationBarPresenter" />
    </Border>
  </ios:ControlTemplate>
  <android:ControlTemplate x:Key="NativeNavigationBarTemplate" TargetType="utu:NavigationBar">
    <utu:NativeNavigationBarPresenter x:Name="NavigationBarPresenter" />
  </android:ControlTemplate>
  <ControlTemplate x:Key="XamlMaterialNavigationBarTemplate" TargetType="utu:NavigationBar">
    <utu:NavigationBarPresenter Style="{StaticResource MaterialNavigationBarPresenter}" x:Name="NavigationBarPresenter" />
  </ControlTemplate>
  <Style x:Key="MaterialNavigationBarPresenter" TargetType="utu:NavigationBarPresenter">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:NavigationBarPresenter">
          <CommandBar x:Name="XamlNavigationBarCommandBar" Style="{StaticResource MaterialNavigationBarCommandBar}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationBarCommandBar" TargetType="CommandBar">
    <Setter Property="Background" Value="{ThemeResource CommandBarBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource CommandBarForeground}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="ClosedDisplayMode" Value="Compact" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <Setter Property="CommandBarOverflowPresenterStyle" Value="{ThemeResource DefaultCommandBarOverflowPresenterStyle}" />
    <Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="utu:CommandBarExtensions.MainCommand" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CommandBar">
          <Grid x:Name="LayoutRoot">
            <Grid.Resources>
              <Visibility x:Key="AppBarButtonHasFlyoutChevronVisibility">Collapsed</Visibility>
              <Storyboard x:Key="OverlayOpeningAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="1" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <Storyboard x:Key="OverlayClosingAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <x:Double x:Key="AppBarButtonContentHeight">24</x:Double>
              <x:Double x:Key="AppBarThemeCompactHeight">56</x:Double>
              <Style TargetType="SplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="ToggleSplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="AppBarButton" BasedOn="{StaticResource MaterialAppBarButton}">
                <Setter Property="Padding" Value="12,16,12,16" />
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="EllipsisIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CommandBarEllipsisIconForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <contract8Present:VisualStateGroup.Transitions>
                  <!-- UNO WORKAROUND: Use literal value of ControlNormalAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception -->
                  <VisualTransition From="CompactClosed" To="CompactOpenDown" GeneratedDuration="00:00:00.250">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{ThemeResource AppBarThemeCompactHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <!-- UNO WORKAROUND: Use literal value of ControlFastAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception -->
                  <VisualTransition From="CompactOpenDown" To="CompactClosed" GeneratedDuration="00:00:00.167">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                        <DiscreteDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{ThemeResource AppBarThemeCompactHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </contract8Present:VisualStateGroup.Transitions>
                <VisualState x:Name="CompactClosed" />
                <VisualState x:Name="CompactOpenUp">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <contract8Present:DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentCompactYTranslation}" />
                    </contract8Present:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootMarginOffsetTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CompactOpenDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AvailableCommandsStates">
                <VisualState x:Name="BothCommands" />
                <VisualState x:Name="PrimaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SecondaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PrimaryItemsControl" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DynamicOverflowStates">
                <VisualState x:Name="DynamicOverflowDisabled" />
                <VisualState x:Name="DynamicOverflowEnabled">
                  <VisualState.Setters>
                    <Setter Target="ContentControlColumnDefinition.Width" Value="Auto" />
                    <Setter Target="PrimaryItemsControlColumnDefinition.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ContentRoot" VerticalAlignment="Center" Height="{TemplateBinding Height}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" Background="{TemplateBinding Background}" XYFocusKeyboardNavigation="Enabled">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="6" />
              </Grid.ColumnDefinitions>
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentTransform" />
              </Grid.RenderTransform>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="MainCommandColumnDefinition" Width="Auto" />
                  <ColumnDefinition x:Name="ContentControlColumnDefinition" Width="*" />
                  <ColumnDefinition x:Name="PrimaryItemsControlColumnDefinition" Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="MainCommandPresenter" Margin="{TemplateBinding Padding}" Content="{Binding Path=(utu:CommandBarExtensions.MainCommand), RelativeSource={RelativeSource TemplatedParent}}">
                  <ContentPresenter.Resources>
                    <x:Double x:Key="AppBarButtonContentHeight">16</x:Double>
                  </ContentPresenter.Resources>
                </ContentPresenter>
                <!--
									Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
									in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
								-->
                <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="{StaticResource MaterialNavigationBarContentMargin}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="20" FontWeight="Medium" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
                <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Center" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                </ItemsControl>
              </Grid>
              <Button x:Name="MoreButton" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialEllipsisButton}" Padding="{ThemeResource CommandBarMoreButtonMargin}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" VerticalAlignment="Top" Grid.Column="2" Control.IsTemplateKeyTipTarget="True" IsAccessKeyScope="True">
                <FontIcon x:Name="EllipsisIcon" VerticalAlignment="Center" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xe712;" Height="20" RenderTransformOrigin="0.5, 0.5">
                  <FontIcon.RenderTransform>
                    <RotateTransform Angle="90" />
                  </FontIcon.RenderTransform>
                </FontIcon>
              </Button>
              <!-- UNO WORKAROUND: Added IsHitTestVisible="False". The Rectangle was blocking pointer events -->
              <Rectangle x:Name="HighContrastBorder" x:DeferLoadStrategy="Lazy" Grid.ColumnSpan="3" Visibility="Collapsed" IsHitTestVisible="False" VerticalAlignment="Stretch" StrokeThickness="1" />
              <Border x:Name="OpenBorder" Grid.ColumnSpan="3" Visibility="Collapsed" VerticalAlignment="Stretch" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource ControlCornerRadius}" />
            </Grid>
            <!-- UNO WORKAROUND: Added IsTabStop="False". Navigation focus with keyboard was erroneously focusing on the Popup instead of the SecondaryCommands -->
            <Popup x:Name="OverflowPopup">
              <Popup.RenderTransform>
                <TransformGroup>
                  <TranslateTransform x:Name="OverflowContentRootMarginOffsetTransform" />
                  <TranslateTransform x:Name="OverflowContentRootTransform" X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentHorizontalOffset}" />
                </TransformGroup>
              </Popup.RenderTransform>
              <Grid x:Name="OverflowContentRoot" Opacity="0" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMinWidth}" MaxWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxWidth}" MaxHeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxHeight}">
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!-- For 21H1 and up, we'll need to wrap the clip and presenter in a Grid which will host the Drop Shadow. -->
                <Grid x:Name="SecondaryItemsControlShadowWrapper" contract7Present:CornerRadius="{ThemeResource OverlayCornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.Clip>
                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentClipRect}">
                      <RectangleGeometry.Transform>
                        <TransformGroup>
                          <TranslateTransform x:Name="OverflowContentRootClipTransform" />
                        </TransformGroup>
                      </RectangleGeometry.Transform>
                    </RectangleGeometry>
                  </Grid.Clip>
                  <CommandBarOverflowPresenter x:Name="SecondaryItemsControl" Style="{TemplateBinding CommandBarOverflowPresenterStyle}" IsTabStop="False">
                    <CommandBarOverflowPresenter.RenderTransform>
                      <TranslateTransform x:Name="OverflowContentTransform" />
                    </CommandBarOverflowPresenter.RenderTransform>
                    <CommandBarOverflowPresenter.Resources>
                      <Style TargetType="AppBarButton" BasedOn="{StaticResource AppBarButtonOverflowStyle}" />
                      <Style TargetType="AppBarToggleButton" BasedOn="{StaticResource AppBarToggleButtonOverflowStyle}" />
                    </CommandBarOverflowPresenter.Resources>
                  </CommandBarOverflowPresenter>
                </Grid>
                <!--
									In order to give us extra space in the windowed popup to translate things down,
									we add a rectangle to make the HWND taller than it otherwise would be.
								-->
                <Rectangle x:Name="WindowedPopupPadding" Grid.Row="1" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialEllipsisButton" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource AppBarButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource AppBarButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource AppBarButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Width" Value="{ThemeResource AppBarExpandButtonThemeWidth}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid Background="Transparent">
            <um:Ripple Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
              <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{StaticResource AppBarEllipsisButtonInnerBorderMargin}" Padding="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Control.IsTemplateFocusTarget="True" />
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseMaterialNavigationBarStyle" TargetType="utu:NavigationBar">
    <!-- Setting content to empty to avoid getting the datacontext -->
    <Setter Property="Content" Value="" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" Style="{StaticResource MaterialHeadline5}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <android:Setter Property="(toolkit:UIElementExtensions.Elevation)" Value="{StaticResource MaterialNavigationBarElevation}" />
    <Setter Property="Height" Value="{StaticResource MaterialNavigationBarHeight}" />
    <Setter Property="Padding" Value="16,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="OverflowButtonVisibility" Value="Collapsed" />
    <Setter Property="IsDynamicOverflowEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource XamlMaterialNavigationBarTemplate}" />
  </Style>
  <Style x:Key="BaseMaterialMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialAppBarButton}">
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnPrimaryBrush}" />
  </Style>
  <Style x:Key="BaseMaterialModalNavigationBarStyle" TargetType="utu:NavigationBar" BasedOn="{StaticResource BaseMaterialNavigationBarStyle}">
    <Setter Property="MainCommandStyle" Value="{StaticResource BaseMaterialModalMainCommandStyle}" />
    <Setter Property="Background" Value="{ThemeResource MaterialSurfaceBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnSurfaceBrush}" />
  </Style>
  <Style x:Key="BaseMaterialModalMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource BaseMaterialMainCommandStyle}">
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnSurfaceBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\TopTabBar.xaml-->
  <StaticResource x:Key="MaterialTopTabBarBackground" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundPointerOver" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundPressed" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelected" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelectedPointerOver" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelectedPressed" ResourceKey="MaterialOnPrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <SolidColorBrush x:Key="MaterialTopTabBarItemForeground" Color="{ThemeResource MaterialOnPrimaryColor}" Opacity="0.70" />
  <x:Double x:Key="MaterialTopTabBarFontSize">14</x:Double>
  <FontFamily x:Key="MaterialTopTabBarFontFamily">Roboto</FontFamily>
  <x:Double x:Key="MaterialTopTabBarHeight">48</x:Double>
  <x:Double x:Key="MaterialTopTabBarItemIconHeight">20</x:Double>
  <x:Double x:Key="MaterialTopTabBarItemIconWidth">20</x:Double>
  <Thickness x:Key="MaterialTopTabBarItemContentMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopTabBarItemContentOnlyMargin">12,0</Thickness>
  <mobile:Style x:Key="MaterialTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter VerticalAlignment="Bottom" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}" x:Name="SelectionIndicatorPresenter" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Height="2" Opacity="0">
              <Border Background="{ThemeResource MaterialOnPrimaryBrush}" x:Name="SelectionIndicatorRect" AutomationProperties.AutomationId="SelectionIndicatorRect" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,2" Height="2" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <mobile:Style x:Key="MaterialTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialTopTabBarBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialTopTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Feedback="{ThemeResource MaterialOnPrimaryBrush}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid ColumnSpacing="8" x:Name="ContentGrid">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Height="{StaticResource MaterialTopTabBarItemIconHeight}" Width="{StaticResource MaterialTopTabBarItemIconWidth}">
                      <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" TextWrapping="NoWrap" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Margin="{StaticResource MaterialTopTabBarItemContentMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter VerticalAlignment="Bottom" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}" x:Name="SelectionIndicatorPresenter" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Height="2" Opacity="0">
              <Border Background="{ThemeResource MaterialOnPrimaryBrush}" x:Name="SelectionIndicatorRect" AutomationProperties.AutomationId="SelectionIndicatorRect" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,2" Height="2" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialTopTabBarBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialTopTabBarFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Feedback="{ThemeResource MaterialOnPrimaryBrush}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid ColumnSpacing="8" x:Name="ContentGrid">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Height="{StaticResource MaterialTopTabBarItemIconHeight}" Width="{StaticResource MaterialTopTabBarItemIconWidth}">
                      <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" TextWrapping="NoWrap" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Margin="{StaticResource MaterialTopTabBarItemContentMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <!--origin: Styles\Controls\v1\_Common.xaml-->
</ResourceDictionary>