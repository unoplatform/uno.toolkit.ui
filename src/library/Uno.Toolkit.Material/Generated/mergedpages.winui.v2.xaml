<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d mobile todo not_win android ios wasm macos" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mobile="http://uno.ui/mobile" xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:todo="what should be done" xmlns:toolkit="using:Uno.UI.Toolkit" xmlns:um="using:Uno.Material" xmlns:utu="using:Uno.Toolkit.UI" xmlns:not_win="http://uno.ui/not_win" xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:android="http://uno.ui/android" xmlns:ios="http://uno.ui/ios" xmlns:wasm="http://uno.ui/wasm" xmlns:macos="http://uno.ui/macos" xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,4)" xmlns:contract6Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,6)" xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:contract8Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,8)" xmlns:contract12Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,12)" xmlns:contract12NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,12)" xmlns:contract6NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,6)" xmlns:contract5NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,5)" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <ResourceDictionary.MergedDictionaries>
    <um:MaterialFonts />
    <um:MaterialColorsV2 />
    <um:MaterialResourcesV2 />
  </ResourceDictionary.MergedDictionaries>
  <!--origin: Styles\Controls\v2\BottomTabBar.xaml-->
  <StaticResource x:Key="MaterialBottomTabBarBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemIconForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemIconForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundPointerOver" ResourceKey="OnSurfaceVariantHoverBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundFocused" ResourceKey="OnSurfaceVariantFocusedBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundPressed" ResourceKey="OnSurfaceVariantPressedBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundSelectedPointerOver" ResourceKey="OnSurfaceHoverBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundSelectedFocused" ResourceKey="OnSurfaceFocusedBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemActiveIndicatorBackgroundSelectedPressed" ResourceKey="OnSurfacePressedBrush" />
  <StaticResource x:Key="MaterialBottomFabTabBarItemDisabledBackground" ResourceKey="OnSurfaceDisabledLowBrush" />
  <StaticResource x:Key="MaterialBottomFabTabBarItemDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialBottomFabTabBarItemPointerOverBackground" ResourceKey="OnPrimaryContainerHoverBrush" />
  <StaticResource x:Key="MaterialBottomFabTabBarItemFocusedBackground" ResourceKey="OnPrimaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialBottomFabTabBarItemPressedBackground" ResourceKey="OnPrimaryContainerPressedBrush" />
  <x:Double x:Key="MaterialBottomTabBarFontSize">12</x:Double>
  <x:Double x:Key="MaterialBottomFabTabBarFontSize">14</x:Double>
  <FontWeight x:Key="MaterialBottomTabBarFontWeight">Medium</FontWeight>
  <x:Double x:Key="MaterialBottomTabBarHeight">80</x:Double>
  <GridLength x:Key="MaterialBottomTabBarGridLengthHeight">80</GridLength>
  <x:Double x:Key="FabItemVerticalOffset">-32</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemIconHeight">18</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemIconWidth">18</x:Double>
  <Thickness x:Key="MaterialBottomTabBarItemContentMargin">0,0,0,6</Thickness>
  <Thickness x:Key="MaterialBottomTabBarItemPadding">0,12,0,16</Thickness>
  <Thickness x:Key="MaterialBottomTabBarItemContentOnlyMargin">12,0</Thickness>
  <CornerRadius x:Key="MaterialBottomTabBarItemActiveIndicatorCornerRadius">16</CornerRadius>
  <x:Double x:Key="MaterialBottomTabBarItemActiveIndicatorWidth">64</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemActiveIndicatorHeight">32</x:Double>
  <Thickness x:Key="MaterialBottomFabTabBarItemPadding">20</Thickness>
  <x:Double x:Key="MaterialBottomFabTabBarItemContentWidthOrHeight">16</x:Double>
  <CornerRadius x:Key="MaterialBottomFabTabBarItemCornerRadius">16</CornerRadius>
  <x:Double x:Key="MaterialBottomFabTabBarItemIconTextPadding">12</x:Double>
  <StaticResource x:Key="MaterialBottomTabBarItemBadgeBackground" ResourceKey="ErrorBrush" />
  <StaticResource x:Key="MaterialBottomTabBarItemBadgeForeground" ResourceKey="OnErrorBrush" />
  <x:Double x:Key="MaterialBottomTabBarItemSmallBadgeHeight">6</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemSmallBadgeWidth">6</x:Double>
  <Thickness x:Key="MaterialBottomTabBarItemSmallBadgeMargin">0,4,20,0</Thickness>
  <x:Double x:Key="MaterialBottomTabBarItemLargeBadgeHeight">16</x:Double>
  <x:Double x:Key="MaterialBottomTabBarItemLargeBadgeMinWidth">16</x:Double>
  <Thickness x:Key="MaterialBottomTabBarItemLargeBadgeMargin">32,2,0,0</Thickness>
  <Thickness x:Key="MaterialBottomTabBarItemLargeBadgePadding">4,0</Thickness>
  <CornerRadius x:Key="MaterialBottomTabBarItemLargeBadgeCornerRadius">8</CornerRadius>
  <Style x:Key="MaterialBottomTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="utu:SafeArea.Insets" Value="Bottom" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialBottomTabBarItemStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Height="{StaticResource MaterialBottomTabBarHeight}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialBottomFabTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource PrimaryContainerBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource OnPrimaryContainerBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomFabTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="IsSelectable" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialBottomFabTabBarItemCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialBottomFabTabBarItemPadding}" />
    <!--  KNOWN ISSUE: The part of the FAB that is translated outside of the TabBar bounds is not clickable  -->
    <!--  https://github.com/unoplatform/uno/issues/7393  -->
    <Setter Property="RenderTransform">
      <Setter.Value>
        <TranslateTransform Y="{StaticResource FabItemVerticalOffset}" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <toolkit:ElevatedView x:Name="ElevatedView" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" Elevation="6">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
                <Grid CornerRadius="{TemplateBinding CornerRadius}">
                  <Grid x:Name="Root" Background="{TemplateBinding Background}">
                    <StackPanel x:Name="ContentPanel" Margin="{TemplateBinding Padding}" Orientation="Horizontal">
                      <!--  Icon  -->
                      <Viewbox Width="{StaticResource MaterialBottomFabTabBarItemContentWidthOrHeight}" Height="{StaticResource MaterialBottomFabTabBarItemContentWidthOrHeight}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                        <ContentPresenter x:Name="IconPresenter" Content="{TemplateBinding Icon}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                      </Viewbox>
                      <!--  Icon/Content spacing  -->
                      <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                        <Border Width="{StaticResource MaterialBottomFabTabBarItemIconTextPadding}" Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                      </Border>
                      <!--  Content  -->
                      <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" />
                    </StackPanel>
                  </Grid>
                  <Border x:Name="StateOverlay" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialBottomFabTabBarItemPointerOverBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialBottomFabTabBarItemPressedBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialBottomFabTabBarItemDisabledForeground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialBottomFabTabBarItemDisabledForeground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialBottomFabTabBarItemDisabledBackground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialBottomFabTabBarItemFocusedBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialBottomTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialBottomTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialBottomTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialBottomTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBottomTabBarFontSize}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialBottomTabBarFontWeight}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="{StaticResource MaterialBottomTabBarItemPadding}" />
    <!--  Workaround with these two properties until this issue is fixed, can be removed after  -->
    <!--  https://github.com/unoplatform/uno/issues/7393  -->
    <Setter Property="Height" Value="{StaticResource MaterialBottomTabBarHeight}" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <not_mobile:VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ActiveIndicator.Background" Value="{ThemeResource MaterialBottomTabBarItemActiveIndicatorBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </not_mobile:VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ActiveIndicator.Background" Value="{ThemeResource MaterialBottomTabBarItemActiveIndicatorBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="ActiveIndicator.Background" Value="{ThemeResource MaterialBottomTabBarItemActiveIndicatorBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemIconForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <not_mobile:VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="ActiveIndicator.Background" Value="{ThemeResource MaterialBottomTabBarItemActiveIndicatorBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </not_mobile:VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="ActiveIndicator.Background" Value="{ThemeResource MaterialBottomTabBarItemActiveIndicatorBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialBottomTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="ContentGrid.RowSpacing" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialBottomTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Height" Value="0" />
                    <Setter Target="ContentRow.Height" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{ThemeResource OnSurfaceBrush}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid" RowSpacing="4">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="IconRow" Height="*" />
                      <RowDefinition x:Name="ContentRow" Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="ActiveIndicator" Background="{StaticResource MaterialBottomTabBarItemActiveIndicatorBackground}" VerticalAlignment="Center" HorizontalAlignment="Center" Height="{StaticResource MaterialBottomTabBarItemActiveIndicatorHeight}" Width="{StaticResource MaterialBottomTabBarItemActiveIndicatorWidth}" CornerRadius="{StaticResource MaterialBottomTabBarItemActiveIndicatorCornerRadius}">
                      <Border Width="{StaticResource MaterialBottomTabBarItemIconWidth}" Height="{StaticResource MaterialBottomTabBarItemIconHeight}" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Viewbox x:Name="IconBox" HorizontalAlignment="Center">
                          <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{StaticResource MaterialBottomTabBarItemIconForeground}" />
                        </Viewbox>
                      </Border>
                      <!--  BADGE  -->
                      <!--  This part can be replaced when InfoBadge will be available in WinUI3  -->
                      <!--  See this commit for the implementation: c935919b2c390014dd8509cc50e16b1549511ffa  -->
                      <!--  (Related Branch: dev/agzi/I274-InfoBadgeImplementationForTBI)  -->
                      <Grid Visibility="{TemplateBinding BadgeVisibility}">
                        <!--  Small Badge  -->
                        <Ellipse Height="{StaticResource MaterialBottomTabBarItemSmallBadgeHeight}" Width="{StaticResource MaterialBottomTabBarItemSmallBadgeWidth}" Margin="{StaticResource MaterialBottomTabBarItemSmallBadgeMargin}" HorizontalAlignment="Right" VerticalAlignment="Top" Fill="{StaticResource MaterialBottomTabBarItemBadgeBackground}" Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}}" />
                        <!--  Large Badge  -->
                        <Border Height="{StaticResource MaterialBottomTabBarItemLargeBadgeHeight}" MinWidth="{StaticResource MaterialBottomTabBarItemLargeBadgeMinWidth}" Padding="{StaticResource MaterialBottomTabBarItemLargeBadgePadding}" Margin="{StaticResource MaterialBottomTabBarItemLargeBadgeMargin}" HorizontalAlignment="Left" VerticalAlignment="Top" CornerRadius="{StaticResource MaterialBottomTabBarItemLargeBadgeCornerRadius}" Background="{StaticResource MaterialBottomTabBarItemBadgeBackground}" Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}">
                          <TextBlock Text="{TemplateBinding BadgeValue}" MaxLines="1" TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource MaterialBottomTabBarItemBadgeForeground}" Style="{StaticResource LabelExtraSmall}" />
                        </Border>
                      </Grid>
                    </Grid>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\Card.xaml-->
  <StaticResource x:Key="MaterialElevatedCardBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="MaterialFilledCardBackground" ResourceKey="SurfaceVariantBrush" />
  <StaticResource x:Key="MaterialOutlinedCardBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="MaterialOutlinedCardBorderBrush" ResourceKey="OutlineBrush" />
  <x:Double x:Key="MaterialCardMinHeight">72</x:Double>
  <x:Double x:Key="MaterialCardMaxWidth">344</x:Double>
  <Thickness x:Key="MaterialCardPadding">16</Thickness>
  <Thickness x:Key="MaterialCardBorderThickness">1</Thickness>
  <CornerRadius x:Key="MaterialCardCornerRadius">12</CornerRadius>
  <x:Double x:Key="MaterialCardElevation">6</x:Double>
  <Thickness x:Key="MaterialCardElevationMargin">6</Thickness>
  <DataTemplate x:Key="M3DefaultHeaderContentTemplate">
    <TextBlock Text="{Binding}" MaxLines="1" Margin="16,16,16,0" Style="{ThemeResource TitleMedium}" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultSubHeaderContentTemplate">
    <TextBlock Text="{Binding}" MaxLines="2" Margin="16,0,16,16" Foreground="{ThemeResource OnSurfaceMediumBrush}" Style="{ThemeResource LabelSmall}" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultSupportingContentTemplate">
    <TextBlock Text="{Binding}" Margin="16,0,16,16" Foreground="{ThemeResource OnSurfaceMediumBrush}" Style="{ThemeResource BodyMedium}" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultAvatarSupportingContentTemplate">
    <TextBlock Text="{Binding}" Margin="16,12,16,16" Foreground="{ThemeResource OnSurfaceMediumBrush}" Style="{ThemeResource BodyMedium}" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultSmallMediaSupportingContentTemplate">
    <Border BorderThickness="0,1,0,0" BorderBrush="{ThemeResource OnSurfaceMediumBrush}">
      <TextBlock Text="{Binding}" Margin="16,12,16,16" Foreground="{ThemeResource OnSurfaceMediumBrush}" Style="{ThemeResource BodyMedium}" />
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultMediaContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="194" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultSmallMediaContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="94" VerticalAlignment="Top" />
  </DataTemplate>
  <DataTemplate x:Key="M3DefaultAvatarContentTemplate">
    <Image Source="{Binding}" Stretch="Uniform" MaxHeight="40" />
  </DataTemplate>
  <Style x:Key="MaterialBaseCardStyle" TargetType="utu:Card">
    <Setter Property="MinHeight" Value="{StaticResource MaterialCardMinHeight}" />
    <Setter Property="MaxWidth" Value="{StaticResource MaterialCardMaxWidth}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="Padding" Value="{StaticResource MaterialCardPadding}" />
    <Setter Property="HeaderContentTemplate" Value="{StaticResource M3DefaultHeaderContentTemplate}" />
    <Setter Property="SubHeaderContentTemplate" Value="{StaticResource M3DefaultSubHeaderContentTemplate}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource M3DefaultSupportingContentTemplate}" />
    <Setter Property="MediaContentTemplate" Value="{StaticResource M3DefaultMediaContentTemplate}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MaterialAvatarBaseCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="SupportingContentTemplate" Value="{StaticResource M3DefaultAvatarSupportingContentTemplate}" />
    <Setter Property="AvatarContentTemplate" Value="{StaticResource M3DefaultAvatarContentTemplate}" />
  </Style>
  <Style x:Key="MaterialSmallMediaBaseCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MediaContentTemplate" Value="{StaticResource M3DefaultSmallMediaContentTemplate}" />
    <Setter Property="SupportingContentTemplate" Value="{StaticResource M3DefaultSmallMediaSupportingContentTemplate}" />
  </Style>
  <Style x:Key="MaterialFilledCardStyle" TargetType="utu:Card" BasedOn="{StaticResource MaterialBaseCardStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialFilledCardBackground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Border for PointerOver State  -->
            <Border Grid.RowSpan="4" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border Grid.RowSpan="4" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Media content part  -->
            <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Header part  -->
            <ContentPresenter Grid.Row="1" x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  SubHeader part  -->
            <ContentPresenter Grid.Row="2" x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="4" Feedback="{StaticResource OnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Row="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedCardStyle" TargetType="utu:Card" BasedOn="{StaticResource MaterialFilledCardStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialOutlinedCardBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOutlinedCardBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
  </Style>
  <Style x:Key="MaterialElevatedCardStyle" BasedOn="{StaticResource MaterialBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialElevatedCardBackground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!--  Border for PointerOver State  -->
              <Border Grid.RowSpan="4" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border Grid.RowSpan="4" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Media content part  -->
              <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Header part  -->
              <ContentPresenter Grid.Row="1" x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter Grid.Row="2" x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="4" Feedback="{StaticResource OnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Row="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialAvatarFilledCardStyle" BasedOn="{StaticResource MaterialAvatarBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialFilledCardBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  Border for PointedOver state  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focus state  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Avatart part  -->
            <ContentPresenter x:Name="AvatarContentPresenter" Content="{TemplateBinding AvatarContent}" ContentTemplate="{TemplateBinding AvatarContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Margin="16,0,0,0" Visibility="{Binding AvatarContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <StackPanel Grid.Column="1" IsHitTestVisible="False">
              <!--  Header part  -->
              <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </StackPanel>
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource OnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Column="2" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Media content part  -->
            <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialAvatarOutlinedCardStyle" BasedOn="{StaticResource MaterialAvatarFilledCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialOutlinedCardBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOutlinedCardBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
  </Style>
  <Style x:Key="MaterialAvatarElevatedCardStyle" BasedOn="{StaticResource MaterialAvatarBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialElevatedCardBackground}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!--  Border for PointedOver state  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focus state  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Avatart part  -->
              <ContentPresenter x:Name="AvatarContentPresenter" Content="{TemplateBinding AvatarContent}" ContentTemplate="{TemplateBinding AvatarContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Margin="16,0,0,0" Visibility="{Binding AvatarContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <StackPanel Grid.Column="1" IsHitTestVisible="False">
                <!--  Header part  -->
                <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
                <!--  SubHeader part  -->
                <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              </StackPanel>
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource OnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Column="2" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
              <!--  Media content part  -->
              <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallMediaFilledCardStyle" BasedOn="{StaticResource MaterialSmallMediaBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialFilledCardBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  Border for PointerOver State  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!--  Media content part  -->
            <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <StackPanel Grid.Column="1">
              <!--  Header part  -->
              <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  SubHeader part  -->
              <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            </StackPanel>
            <!--  Ripple effect  -->
            <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource OnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Supporting Content part  -->
            <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
            <!--  Icons section part  -->
            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallMediaOutlinedCardStyle" BasedOn="{StaticResource MaterialSmallMediaFilledCardStyle}" TargetType="utu:Card">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{StaticResource MaterialOutlinedCardBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOutlinedCardBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
  </Style>
  <Style x:Key="MaterialSmallMediaElevatedCardStyle" BasedOn="{StaticResource MaterialSmallMediaBaseCardStyle}" TargetType="utu:Card">
    <Setter Property="Background" Value="{StaticResource MaterialElevatedCardBackground}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Card">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Margin="{TemplateBinding Margin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!--  Border for PointerOver State  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border Grid.RowSpan="3" Grid.ColumnSpan="3" x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
              <!--  Media content part  -->
              <ContentPresenter x:Name="MediaContentPresenter" Content="{TemplateBinding MediaContent}" ContentTemplate="{TemplateBinding MediaContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" IsHitTestVisible="False" Visibility="{Binding MediaContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <StackPanel Grid.Column="1">
                <!--  Header part  -->
                <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding HeaderContent}" ContentTemplate="{TemplateBinding HeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding HeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
                <!--  SubHeader part  -->
                <ContentPresenter x:Name="SubHeaderContentPresenter" Content="{TemplateBinding SubHeaderContent}" ContentTemplate="{TemplateBinding SubHeaderContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SubHeaderContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              </StackPanel>
              <!--  Ripple effect  -->
              <um:Ripple Grid.RowSpan="3" Grid.ColumnSpan="3" Feedback="{StaticResource OnSurfaceFocusedBrush}" CornerRadius="{StaticResource MaterialCardCornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Supporting Content part  -->
              <ContentPresenter Grid.Row="1" Grid.ColumnSpan="3" x:Name="SupportingContentPresenter" Content="{TemplateBinding SupportingContent}" ContentTemplate="{TemplateBinding SupportingContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding SupportingContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}" />
              <!--  Icons section part  -->
              <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" x:Name="IconsContentPresenter" Content="{TemplateBinding IconsContent}" ContentTemplate="{TemplateBinding IconsContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="{Binding IconsContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}}" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\CardContentControl.xaml-->
  <Style x:Key="MaterialBaseCardContentControlStyle" TargetType="utu:CardContentControl">
    <Setter Property="MinHeight" Value="{StaticResource MaterialCardMinHeight}" />
    <Setter Property="MaxWidth" Value="{StaticResource MaterialCardMaxWidth}" />
    <Setter Property="Margin" Value="{StaticResource MaterialCardElevationMargin}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialCardCornerRadius}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MaterialFilledCardContentControlStyle" BasedOn="{StaticResource MaterialBaseCardContentControlStyle}" TargetType="utu:CardContentControl">
    <Setter Property="Background" Value="{StaticResource MaterialFilledCardBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:CardContentControl">
          <Grid x:Name="GridRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverPressed" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--  Ripple effect  -->
            <!-- Will add the ripple effect later on when this issue is taken care of: -->
            <!-- https://github.com/unoplatform/uno.ui.toolkit/issues/88 -->
            <!--<um:Ripple Feedback="{StaticResource OnSurfaceFocusedBrush}"
										 BorderBrush="{TemplateBinding BorderBrush}"
										 BorderThickness="{TemplateBinding BorderThickness}"
										 CornerRadius="{StaticResource MaterialCardCornerRadius}"
										 Padding="{TemplateBinding Padding}"
										 AutomationProperties.AccessibilityView="Raw" />-->
            <!--  Main ContentPresenter  -->
            <ContentPresenter x:Name="ContentPresenter" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <!--  Border for Pressed State  -->
            <Border x:Name="HoverPressed" Background="{StaticResource OnSurfacePressedBrush}" IsHitTestVisible="False" Opacity="0" />
            <!--  Border for PointerOver State  -->
            <Border x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" IsHitTestVisible="False" Opacity="0" />
            <!--  Border for Focused State  -->
            <Border x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" IsHitTestVisible="False" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedCardContentControlStyle" BasedOn="{StaticResource MaterialFilledCardContentControlStyle}" TargetType="utu:CardContentControl">
    <Setter Property="Background" Value="{StaticResource MaterialOutlinedCardBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialOutlinedCardBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialCardBorderThickness}" />
  </Style>
  <Style x:Key="MaterialElevatedCardContentControlStyle" BasedOn="{StaticResource MaterialBaseCardContentControlStyle}" TargetType="utu:CardContentControl">
    <Setter Property="Background" Value="{StaticResource MaterialElevatedCardBackground}" />
    <Setter Property="Elevation" Value="{StaticResource MaterialCardElevation}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:CardContentControl">
          <!--  Elevated View  -->
          <toolkit:ElevatedView x:Name="ElevatedRoot" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" MaxWidth="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}" ShadowColor="{TemplateBinding ShadowColor}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverPressed" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialDelayedBeginTime}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                    <Setter Target="GridRoot.Opacity" Value="0.38" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="GridRoot" CornerRadius="{TemplateBinding CornerRadius}">
              <!--  Ripple effect  -->
              <!-- Will add the ripple effect later on when this issue is taken care of: -->
              <!-- https://github.com/unoplatform/uno.ui.toolkit/issues/88 -->
              <!--<um:Ripple Feedback="{StaticResource OnSurfaceFocusedBrush}"
											 CornerRadius="{StaticResource MaterialCardCornerRadius}"
											 Padding="{TemplateBinding Padding}"
											 AutomationProperties.AccessibilityView="Raw" />-->
              <!--  Main ContentPresenter  -->
              <ContentPresenter x:Name="ContentPresenter" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
              <!--  Border for Pressed State  -->
              <Border x:Name="HoverPressed" Background="{StaticResource OnSurfacePressedBrush}" IsHitTestVisible="False" Opacity="0" />
              <!--  Border for PointerOver State  -->
              <Border x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" IsHitTestVisible="False" Opacity="0" />
              <!--  Border for Focused State  -->
              <Border x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" IsHitTestVisible="False" Opacity="0" />
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\Chip.xaml-->
  <x:String x:Key="MaterialChipDeleteIcon">M11.25 1.8075L10.1925 0.75L6 4.9425L1.8075 0.75L0.75 1.8075L4.9425 6L0.75 10.1925L1.8075 11.25L6 7.0575L10.1925 11.25L11.25 10.1925L7.0575 6L11.25 1.8075Z</x:String>
  <x:String x:Key="MaterialCheckGlyphPathData">M28.718018,0L32,3.2819897 10.666016,24.616999 0,13.951997 3.2810059,10.670007 10.666016,18.055033z</x:String>
  <StaticResource x:Key="MaterialChipBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialChipSelectedBackground" ResourceKey="SecondaryContainerBrush" />
  <StaticResource x:Key="MaterialChipPointerOverStateOverlay" ResourceKey="OnSurfaceVariantHoverBrush" />
  <StaticResource x:Key="MaterialChipFocusedStateOverlay" ResourceKey="OnSurfaceVariantFocusedBrush" />
  <StaticResource x:Key="MaterialChipPressedStateOverlay" ResourceKey="OnSurfaceVariantPressedBrush" />
  <StaticResource x:Key="MaterialChipSelectedPointerOverStateOverlay" ResourceKey="OnSecondaryContainerHoverBrush" />
  <StaticResource x:Key="MaterialChipSelectedFocusedStateOverlay" ResourceKey="OnSecondaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialChipSelectedPressedStateOverlay" ResourceKey="OnSecondaryContainerSelectedBrush" />
  <StaticResource x:Key="MaterialChipForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialChipPointerOverForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialChipFocusedForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialChipPressedForeground" ResourceKey="OnSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialChipSelectedForeground" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialChipSelectedPointerOverForeground" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialChipSelectedFocusedForeground" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialChipSelectedPressedForeground" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialChipIconForeground" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialChipIconDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialChipDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialChipDisabledBackground" ResourceKey="OnSurfaceDisabledLowBrush" />
  <StaticResource x:Key="MaterialChipDisabledBorderBrush" ResourceKey="OnSurfaceVariantDisabledLowBrush" />
  <x:Double x:Key="MaterialChipHeight">32</x:Double>
  <x:Double x:Key="MaterialChipContentMinHeight">20</x:Double>
  <x:Double x:Key="MaterialChipSize">12</x:Double>
  <x:Double x:Key="MaterialChipDeleteIconContainerLength">18</x:Double>
  <x:Double x:Key="MaterialChipDeleteIconLength">11</x:Double>
  <x:Double x:Key="MaterialChipBorderThickness">1</x:Double>
  <x:Double x:Key="M3MateriaChipCheckGlyphSize">20</x:Double>
  <x:Double x:Key="MaterialChipElevation">4</x:Double>
  <x:Double x:Key="MaterialChipIconSize">18</x:Double>
  <CornerRadius x:Key="MaterialChipCornerRadius">8</CornerRadius>
  <Thickness x:Key="MaterialChipElevationMargin">4</Thickness>
  <Style x:Key="MaterialChipDeleteIconButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="BorderRoot" Width="{StaticResource MaterialChipDeleteIconContainerLength}" Height="{StaticResource MaterialChipDeleteIconContainerLength}" Background="{TemplateBinding Background}">
            <Path x:Name="GlyphElement" Width="{StaticResource MaterialChipDeleteIconLength}" Height="{StaticResource MaterialChipDeleteIconLength}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Data="{StaticResource MaterialChipDeleteIcon}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialChipStyle" TargetType="utu:Chip">
    <Setter Property="Foreground" Value="{StaticResource MaterialChipForeground}" />
    <Setter Property="Background" Value="{StaticResource MaterialChipBackground}" />
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialChipBorderThickness}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialChipCornerRadius}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="8,0" />
    <Setter Property="Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Chip">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialChipPointerOverStateOverlay}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipPointerOverForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialChipPressedStateOverlay}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipPressedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Elevation" Value="0" />
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipDisabledBackground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipDisabledForeground}" />
                    <Setter Target="PART_RemoveButton.Foreground" Value="{StaticResource MaterialChipIconDisabledForeground}" />
                    <Setter Target="ElevatedRoot.BorderBrush" Value="{StaticResource MaterialChipDisabledBorderBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialChipIconDisabledForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipSelectedBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialChipSelectedBackground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipSelectedForeground}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialChipIconForeground}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipSelectedBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialChipSelectedPointerOverStateOverlay}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipSelectedPointerOverForeground}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ElevatedRoot.Background" Value="{StaticResource MaterialChipSelectedBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialChipSelectedPressedStateOverlay}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialChipSelectedPressedForeground}" />
                    <Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <toolkit:ElevatedView x:Name="ElevatedRoot" Height="{StaticResource MaterialChipHeight}" Margin="{StaticResource MaterialChipElevationMargin}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{TemplateBinding Elevation}">
              <Grid CornerRadius="{TemplateBinding CornerRadius}">
                <Border x:Name="StateOverlay" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
                <um:Ripple Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{StaticResource OnSurfaceFocusedBrush}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <!--  0: Leading Icon, 1: Content: 2: Remove Button  -->
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!--  C0: Leading Icon / Check Glyph  -->
                    <!--  fixme: ContentControl/Presenter template-binding to icon would crash on uwp  -->
                    <ContentPresenter x:Name="IconPresenter" Grid.Column="0" Width="{StaticResource MaterialChipIconSize}" Height="{StaticResource MaterialChipIconSize}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Icon}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplate="{TemplateBinding IconTemplate}" Foreground="{StaticResource MaterialChipIconForeground}" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" />
                    <Grid x:Name="CheckGlyphElement" Grid.Column="0" Width="{StaticResource M3MateriaChipCheckGlyphSize}" Height="{StaticResource M3MateriaChipCheckGlyphSize}" Padding="2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed">
                      <Path HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Data="{StaticResource MaterialCheckGlyphPathData}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}, FallbackValue=Collapsed}" />
                    </Grid>
                    <!--  C1: Content  -->
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" CharacterSpacing="7" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{StaticResource MaterialMediumFontFamily}" Foreground="{TemplateBinding Foreground}" />
                    <!--  C2: Remove Button  -->
                    <Button x:Name="PART_RemoveButton" Grid.Column="2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialChipDeleteIconButtonStyle}" Visibility="{Binding CanRemove, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}, FallbackValue=Collapsed}" />
                  </Grid>
                </um:Ripple>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialAssistChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsCheckable" Value="False" />
    <Setter Property="CanRemove" Value="False" />
  </Style>
  <Style x:Key="MaterialElevatedAssistChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Elevation" Value="{StaticResource MaterialChipElevation}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="IsCheckable" Value="False" />
    <Setter Property="CanRemove" Value="False" />
  </Style>
  <Style x:Key="MaterialInputChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="IsCheckable" Value="True" />
  </Style>
  <Style x:Key="MaterialFilterChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="IsCheckable" Value="True" />
  </Style>
  <Style x:Key="MaterialElevatedFilterChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Elevation" Value="{StaticResource MaterialChipElevation}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="IsCheckable" Value="True" />
  </Style>
  <Style x:Key="MaterialSuggestionChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="IsCheckable" Value="True" />
  </Style>
  <Style x:Key="MaterialElevatedSuggestionChipStyle" BasedOn="{StaticResource MaterialChipStyle}" TargetType="utu:Chip">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Elevation" Value="{StaticResource MaterialChipElevation}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="IsCheckable" Value="True" />
  </Style>
  <!--origin: Styles\Controls\v2\ChipGroup.xaml-->
  <ItemsPanelTemplate x:Key="MaterialHorizontalChipGroupItemsPanel">
    <StackPanel Orientation="Horizontal" Spacing="8" />
  </ItemsPanelTemplate>
  <Style x:Key="MaterialBaseChipGroupStyle" TargetType="utu:ChipGroup">
    <Setter Property="ItemsPanel" Value="{StaticResource MaterialHorizontalChipGroupItemsPanel}" />
  </Style>
  <Style x:Key="MaterialInputChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialInputChipStyle}" />
    <Setter Property="CanRemove" Value="True" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialElevatedSuggestionChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialElevatedSuggestionChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Single" />
  </Style>
  <Style x:Key="MaterialSuggestionChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialSuggestionChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Single" />
  </Style>
  <Style x:Key="MaterialElevatedFilterChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialElevatedFilterChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialFilterChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialFilterChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="Multiple" />
  </Style>
  <Style x:Key="MaterialElevatedAssistChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialElevatedAssistChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="None" />
  </Style>
  <Style x:Key="MaterialAssistChipGroupStyle" BasedOn="{StaticResource MaterialBaseChipGroupStyle}" TargetType="utu:ChipGroup">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialAssistChipStyle}" />
    <Setter Property="CanRemove" Value="False" />
    <Setter Property="SelectionMode" Value="None" />
  </Style>
  <!--origin: Styles\Controls\v2\Divider.xaml-->
  <x:Double x:Key="MaterialDividerHeight">1</x:Double>
  <Style x:Key="MaterialDividerStyle" TargetType="utu:Divider">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceFocusedBrush}" />
    <Setter Property="SubHeaderForeground" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:Divider">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Rectangle Fill="{TemplateBinding Foreground}" Height="{StaticResource MaterialDividerHeight}" />
            <TextBlock Text="{TemplateBinding SubHeader}" Visibility="{Binding SubHeader, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed}" Style="{StaticResource BodySmall}" Foreground="{TemplateBinding SubHeaderForeground}" Margin="0,4,0,0" Grid.Row="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\NavigationBar.xaml-->
  <x:Double x:Key="MaterialNavigationBarElevation">4</x:Double>
  <x:Double x:Key="MaterialXamlNavigationBarHeight">64</x:Double>
  <x:Double x:Key="MaterialNavigationBarHeight">48</x:Double>
  <Thickness x:Key="MaterialNavigationBarContentMargin">16,0,0,0</Thickness>
  <Thickness x:Key="MaterialAppBarEllipsisButtonInnerBorderMargin">2,6,6,6</Thickness>
  <Style x:Key="BaseMaterialNavigationBarStyle" TargetType="utu:NavigationBar">
    <!--  Setting content to empty to avoid getting the datacontext  -->
    <Setter Property="Content" Value="" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" Style="{StaticResource TitleLarge}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <android:Setter Property="(toolkit:UIElementExtensions.Elevation)" Value="{StaticResource MaterialNavigationBarElevation}" />
    <not_mobile:Setter Property="Height" Value="{StaticResource MaterialXamlNavigationBarHeight}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="OverflowButtonVisibility" Value="Collapsed" />
    <Setter Property="IsDynamicOverflowEnabled" Value="False" />
    <mobile:Setter Property="utu:SafeArea.Insets" Value="Top" />
    <mobile:Setter Property="Template" Value="{StaticResource MaterialNativeNavigationBarTemplate}" />
    <not_mobile:Setter Property="Template" Value="{StaticResource XamlMaterialNavigationBarTemplate}" />
    <mobile:Setter Property="Height" Value="NaN" />
  </Style>
  <Style x:Key="MaterialMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialAppBarButtonStyle}">
    <Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="MaterialNavigationBarStyle" BasedOn="{StaticResource BaseMaterialNavigationBarStyle}" TargetType="utu:NavigationBar">
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialMainCommandStyle}" />
  </Style>
  <Style x:Key="MaterialNavigationBarPresenter" TargetType="utu:NavigationBarPresenter">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:NavigationBarPresenter">
          <CommandBar x:Name="XamlNavigationBarCommandBar" Style="{StaticResource MaterialNavigationBarCommandBar}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationBarCommandBar" TargetType="CommandBar">
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="ClosedDisplayMode" Value="Compact" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="utu:CommandBarExtensions.MainCommand" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CommandBar">
          <Grid x:Name="LayoutRoot">
            <Grid.Resources>
              <Visibility x:Key="AppBarButtonHasFlyoutChevronVisibility">Collapsed</Visibility>
              <Storyboard x:Key="OverlayOpeningAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="1" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <Storyboard x:Key="OverlayClosingAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <x:Double x:Key="MaterialAppBarButtonContentHeight">24</x:Double>
              <x:Double x:Key="AppBarThemeCompactHeight">56</x:Double>
              <Style TargetType="SplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="ToggleSplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="AppBarButton" BasedOn="{StaticResource MaterialAppBarButtonStyle}">
                <Setter Property="Padding" Value="12,16,12,16" />
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="EllipsisIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CommandBarEllipsisIconForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <contract8Present:VisualStateGroup.Transitions>
                  <!--  UNO WORKAROUND: Use literal value of ControlNormalAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception  -->
                  <VisualTransition From="CompactClosed" To="CompactOpenDown" GeneratedDuration="00:00:00.250">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{ThemeResource AppBarThemeCompactHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <!--  UNO WORKAROUND: Use literal value of ControlFastAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception  -->
                  <VisualTransition From="CompactOpenDown" To="CompactClosed" GeneratedDuration="00:00:00.167">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                        <DiscreteDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{ThemeResource AppBarThemeCompactHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </contract8Present:VisualStateGroup.Transitions>
                <VisualState x:Name="CompactClosed" />
                <VisualState x:Name="CompactOpenUp">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <contract8Present:DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentCompactYTranslation}" />
                    </contract8Present:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootMarginOffsetTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CompactOpenDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AvailableCommandsStates">
                <VisualState x:Name="BothCommands" />
                <VisualState x:Name="PrimaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SecondaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PrimaryItemsControl" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DynamicOverflowStates">
                <VisualState x:Name="DynamicOverflowDisabled" />
                <VisualState x:Name="DynamicOverflowEnabled">
                  <VisualState.Setters>
                    <Setter Target="ContentControlColumnDefinition.Width" Value="Auto" />
                    <Setter Target="PrimaryItemsControlColumnDefinition.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ContentRoot" VerticalAlignment="Center" Height="{TemplateBinding Height}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" Background="{TemplateBinding Background}" XYFocusKeyboardNavigation="Enabled">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="6" />
              </Grid.ColumnDefinitions>
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentTransform" />
              </Grid.RenderTransform>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="MainCommandColumnDefinition" Width="Auto" />
                  <ColumnDefinition x:Name="ContentControlColumnDefinition" Width="*" />
                  <ColumnDefinition x:Name="PrimaryItemsControlColumnDefinition" Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="MainCommandPresenter" Margin="{TemplateBinding Padding}" Content="{Binding Path=(utu:CommandBarExtensions.MainCommand), RelativeSource={RelativeSource TemplatedParent}}">
                  <ContentPresenter.Resources>
                    <x:Double x:Key="MaterialAppBarButtonContentHeight">16</x:Double>
                  </ContentPresenter.Resources>
                </ContentPresenter>
                <!--
									Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
									in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
								-->
                <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="{StaticResource MaterialNavigationBarContentMargin}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="20" FontWeight="Medium" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
                <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Center" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                </ItemsControl>
              </Grid>
              <Button x:Name="MoreButton" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialEllipsisButton}" Padding="{ThemeResource CommandBarMoreButtonMargin}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" VerticalAlignment="Top" Grid.Column="2" Control.IsTemplateKeyTipTarget="True" IsAccessKeyScope="True">
                <FontIcon x:Name="EllipsisIcon" VerticalAlignment="Center" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xe712;" Height="20" RenderTransformOrigin="0.5, 0.5">
                  <FontIcon.RenderTransform>
                    <RotateTransform Angle="90" />
                  </FontIcon.RenderTransform>
                </FontIcon>
              </Button>
              <!--  UNO WORKAROUND: Added IsHitTestVisible="False". The Rectangle was blocking pointer events  -->
              <Rectangle x:Name="HighContrastBorder" x:DeferLoadStrategy="Lazy" Grid.ColumnSpan="3" Visibility="Collapsed" IsHitTestVisible="False" VerticalAlignment="Stretch" StrokeThickness="1" />
              <Border x:Name="OpenBorder" Grid.ColumnSpan="3" Visibility="Collapsed" VerticalAlignment="Stretch" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource ControlCornerRadius}" />
            </Grid>
            <!--  UNO WORKAROUND: Added IsTabStop="False". Navigation focus with keyboard was erroneously focusing on the Popup instead of the SecondaryCommands  -->
            <Popup x:Name="OverflowPopup">
              <Popup.RenderTransform>
                <TransformGroup>
                  <TranslateTransform x:Name="OverflowContentRootMarginOffsetTransform" />
                  <TranslateTransform x:Name="OverflowContentRootTransform" X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentHorizontalOffset}" />
                </TransformGroup>
              </Popup.RenderTransform>
              <Grid x:Name="OverflowContentRoot" Opacity="0" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMinWidth}" MaxWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxWidth}" MaxHeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxHeight}">
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!--  For 21H1 and up, we'll need to wrap the clip and presenter in a Grid which will host the Drop Shadow.  -->
                <Grid x:Name="SecondaryItemsControlShadowWrapper" contract7Present:CornerRadius="{ThemeResource OverlayCornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.Clip>
                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentClipRect}">
                      <RectangleGeometry.Transform>
                        <TransformGroup>
                          <TranslateTransform x:Name="OverflowContentRootClipTransform" />
                        </TransformGroup>
                      </RectangleGeometry.Transform>
                    </RectangleGeometry>
                  </Grid.Clip>
                  <CommandBarOverflowPresenter x:Name="SecondaryItemsControl" Style="{TemplateBinding CommandBarOverflowPresenterStyle}" IsTabStop="False">
                    <CommandBarOverflowPresenter.RenderTransform>
                      <TranslateTransform x:Name="OverflowContentTransform" />
                    </CommandBarOverflowPresenter.RenderTransform>
                    <CommandBarOverflowPresenter.ItemContainerStyle>
                      <Style TargetType="FrameworkElement">
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                        <Setter Property="Width" Value="NaN" />
                      </Style>
                    </CommandBarOverflowPresenter.ItemContainerStyle>
                  </CommandBarOverflowPresenter>
                </Grid>
                <!--
									In order to give us extra space in the windowed popup to translate things down,
									we add a rectangle to make the HWND taller than it otherwise would be.
								-->
                <Rectangle x:Name="WindowedPopupPadding" Grid.Row="1" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialModalNavigationBarStyle" BasedOn="{StaticResource MaterialNavigationBarStyle}" TargetType="utu:NavigationBar">
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialModalMainCommandStyle}" />
    <Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="MaterialModalMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialMainCommandStyle}">
    <Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="MaterialPrimaryMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialMainCommandStyle}">
    <Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
  </Style>
  <Style x:Key="MaterialPrimaryNavigationBarStyle" BasedOn="{StaticResource MaterialNavigationBarStyle}" TargetType="utu:NavigationBar">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialPrimaryMainCommandStyle}" />
    <not_mobile:Setter Property="Template" Value="{StaticResource XamlMaterialPrimaryNavigationBarTemplate}" />
  </Style>
  <Style x:Key="MaterialPrimaryNavigationBarPresenter" TargetType="utu:NavigationBarPresenter">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:NavigationBarPresenter">
          <CommandBar x:Name="XamlNavigationBarCommandBar" Style="{StaticResource MaterialPrimaryNavigationBarCommandBar}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialPrimaryNavigationBarCommandBar" TargetType="CommandBar">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="ClosedDisplayMode" Value="Compact" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="utu:CommandBarExtensions.MainCommand" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CommandBar">
          <Grid x:Name="LayoutRoot">
            <Grid.Resources>
              <Visibility x:Key="AppBarButtonHasFlyoutChevronVisibility">Collapsed</Visibility>
              <Storyboard x:Key="OverlayOpeningAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="1" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <Storyboard x:Key="OverlayClosingAnimation">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                  <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                  <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                </DoubleAnimationUsingKeyFrames>
              </Storyboard>
              <x:Double x:Key="MaterialAppBarButtonContentHeight">24</x:Double>
              <x:Double x:Key="AppBarThemeCompactHeight">56</x:Double>
              <Style TargetType="SplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="ToggleSplitButton" BasedOn="{StaticResource SplitButtonCommandBarStyle}" />
              <Style TargetType="AppBarButton" BasedOn="{StaticResource MaterialPrimaryAppBarButtonStyle}">
                <Setter Property="Padding" Value="12,16,12,16" />
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="EllipsisIcon" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CommandBarEllipsisIconForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <contract8Present:VisualStateGroup.Transitions>
                  <!--  UNO WORKAROUND: Use literal value of ControlNormalAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception  -->
                  <VisualTransition From="CompactClosed" To="CompactOpenDown" GeneratedDuration="00:00:00.250">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{ThemeResource AppBarThemeCompactHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlNormalAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <!--  UNO WORKAROUND: Use literal value of ControlFastAnimationDuration. Resolving a StaticResource string to a string non-DP causes an exception  -->
                  <VisualTransition From="CompactOpenDown" To="CompactClosed" GeneratedDuration="00:00:00.167">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                        <DiscreteDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{ThemeResource AppBarThemeCompactHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="{StaticResource ControlFastAnimationDuration}" KeySpline="{StaticResource ControlFastOutSlowInKeySpline}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.NegativeOverflowContentHeight}" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </contract8Present:VisualStateGroup.Transitions>
                <VisualState x:Name="CompactClosed" />
                <VisualState x:Name="CompactOpenUp">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <contract8Present:DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentCompactYTranslation}" />
                    </contract8Present:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootMarginOffsetTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CompactOpenDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OpenBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="VerticalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Stretch" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighContrastBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AvailableCommandsStates">
                <VisualState x:Name="BothCommands" />
                <VisualState x:Name="PrimaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MoreButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SecondaryCommandsOnly">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PrimaryItemsControl" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DynamicOverflowStates">
                <VisualState x:Name="DynamicOverflowDisabled" />
                <VisualState x:Name="DynamicOverflowEnabled">
                  <VisualState.Setters>
                    <Setter Target="ContentControlColumnDefinition.Width" Value="Auto" />
                    <Setter Target="PrimaryItemsControlColumnDefinition.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ContentRoot" VerticalAlignment="Center" Height="{TemplateBinding Height}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" Background="{TemplateBinding Background}" XYFocusKeyboardNavigation="Enabled">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="6" />
              </Grid.ColumnDefinitions>
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentTransform" />
              </Grid.RenderTransform>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="MainCommandColumnDefinition" Width="Auto" />
                  <ColumnDefinition x:Name="ContentControlColumnDefinition" Width="*" />
                  <ColumnDefinition x:Name="PrimaryItemsControlColumnDefinition" Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="MainCommandPresenter" Margin="{TemplateBinding Padding}" Content="{Binding Path=(utu:CommandBarExtensions.MainCommand), RelativeSource={RelativeSource TemplatedParent}}">
                  <ContentPresenter.Resources>
                    <x:Double x:Key="MaterialAppBarButtonContentHeight">16</x:Double>
                  </ContentPresenter.Resources>
                </ContentPresenter>
                <!--
									Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
									in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
								-->
                <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="{StaticResource MaterialNavigationBarContentMargin}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="20" FontWeight="Medium" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
                <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Center" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>
                </ItemsControl>
              </Grid>
              <Button x:Name="MoreButton" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialEllipsisButton}" Padding="{ThemeResource CommandBarMoreButtonMargin}" MinHeight="{ThemeResource AppBarThemeCompactHeight}" VerticalAlignment="Top" Grid.Column="2" Control.IsTemplateKeyTipTarget="True" IsAccessKeyScope="True">
                <FontIcon x:Name="EllipsisIcon" VerticalAlignment="Center" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xe712;" Height="20" RenderTransformOrigin="0.5, 0.5">
                  <FontIcon.RenderTransform>
                    <RotateTransform Angle="90" />
                  </FontIcon.RenderTransform>
                </FontIcon>
              </Button>
              <!--  UNO WORKAROUND: Added IsHitTestVisible="False". The Rectangle was blocking pointer events  -->
              <Rectangle x:Name="HighContrastBorder" x:DeferLoadStrategy="Lazy" Grid.ColumnSpan="3" Visibility="Collapsed" IsHitTestVisible="False" VerticalAlignment="Stretch" StrokeThickness="1" />
              <Border x:Name="OpenBorder" Grid.ColumnSpan="3" Visibility="Collapsed" VerticalAlignment="Stretch" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource ControlCornerRadius}" />
            </Grid>
            <!--  UNO WORKAROUND: Added IsTabStop="False". Navigation focus with keyboard was erroneously focusing on the Popup instead of the SecondaryCommands  -->
            <Popup x:Name="OverflowPopup">
              <Popup.RenderTransform>
                <TransformGroup>
                  <TranslateTransform x:Name="OverflowContentRootMarginOffsetTransform" />
                  <TranslateTransform x:Name="OverflowContentRootTransform" X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentHorizontalOffset}" />
                </TransformGroup>
              </Popup.RenderTransform>
              <Grid x:Name="OverflowContentRoot" Opacity="0" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMinWidth}" MaxWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxWidth}" MaxHeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentMaxHeight}">
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!--  For 21H1 and up, we'll need to wrap the clip and presenter in a Grid which will host the Drop Shadow.  -->
                <Grid x:Name="SecondaryItemsControlShadowWrapper" contract7Present:CornerRadius="{ThemeResource OverlayCornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.Clip>
                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.OverflowContentClipRect}">
                      <RectangleGeometry.Transform>
                        <TransformGroup>
                          <TranslateTransform x:Name="OverflowContentRootClipTransform" />
                        </TransformGroup>
                      </RectangleGeometry.Transform>
                    </RectangleGeometry>
                  </Grid.Clip>
                  <CommandBarOverflowPresenter x:Name="SecondaryItemsControl" Style="{TemplateBinding CommandBarOverflowPresenterStyle}" IsTabStop="False">
                    <CommandBarOverflowPresenter.RenderTransform>
                      <TranslateTransform x:Name="OverflowContentTransform" />
                    </CommandBarOverflowPresenter.RenderTransform>
                    <CommandBarOverflowPresenter.ItemContainerStyle>
                      <Style TargetType="FrameworkElement">
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                        <Setter Property="Width" Value="NaN" />
                      </Style>
                    </CommandBarOverflowPresenter.ItemContainerStyle>
                  </CommandBarOverflowPresenter>
                </Grid>
                <!--
									In order to give us extra space in the windowed popup to translate things down,
									we add a rectangle to make the HWND taller than it otherwise would be.
								-->
                <Rectangle x:Name="WindowedPopupPadding" Grid.Row="1" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.ContentHeight}" />
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialPrimaryModalNavigationBarStyle" BasedOn="{StaticResource MaterialPrimaryNavigationBarStyle}" TargetType="utu:NavigationBar">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="MainCommandStyle" Value="{StaticResource MaterialPrimaryModalMainCommandStyle}" />
  </Style>
  <Style x:Key="MaterialPrimaryModalMainCommandStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialPrimaryMainCommandStyle}">
    <Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
  </Style>
  <Style x:Key="MaterialAppBarButtonOverflowStyle" TargetType="AppBarButton" BasedOn="{StaticResource AppBarButtonOverflowStyle}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="MaterialEllipsisButton" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Width" Value="{ThemeResource AppBarExpandButtonThemeWidth}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid Background="Transparent">
            <um:Ripple Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{StaticResource MaterialAppBarEllipsisButtonInnerBorderMargin}" Padding="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Control.IsTemplateFocusTarget="True" />
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialPrimaryAppBarButtonStyle" TargetType="AppBarButton" BasedOn="{StaticResource MaterialAppBarButtonStyle}">
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
  </Style>
  <ios:ControlTemplate x:Key="MaterialNativeNavigationBarTemplate" TargetType="utu:NavigationBar">
    <Border BorderThickness="{TemplateBinding Padding}">
      <utu:NativeNavigationBarPresenter Height="44" x:Name="NavigationBarPresenter" />
    </Border>
  </ios:ControlTemplate>
  <android:ControlTemplate x:Key="MaterialNativeNavigationBarTemplate" TargetType="utu:NavigationBar">
    <utu:NativeNavigationBarPresenter x:Name="NavigationBarPresenter" />
  </android:ControlTemplate>
  <ControlTemplate x:Key="XamlMaterialNavigationBarTemplate" TargetType="utu:NavigationBar">
    <utu:NavigationBarPresenter Style="{StaticResource MaterialNavigationBarPresenter}" x:Name="NavigationBarPresenter" />
  </ControlTemplate>
  <ControlTemplate x:Key="XamlMaterialPrimaryNavigationBarTemplate" TargetType="utu:NavigationBar">
    <utu:NavigationBarPresenter Style="{StaticResource MaterialPrimaryNavigationBarPresenter}" x:Name="NavigationBarPresenter" />
  </ControlTemplate>
  <!--origin: Styles\Controls\v2\TopTabBar.xaml-->
  <StaticResource x:Key="MaterialTopTabBarBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarIndicator" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelectedPointerOver" ResourceKey="PrimaryHoverBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelectedPressed" ResourceKey="PrimaryPressedBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundSelectedFocused" ResourceKey="MaterialTopTabBarItemPrimaryFocusedBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelected" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelectedPointerOver" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelectedPressed" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundSelectedFocused" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundPointerOver" ResourceKey="PrimaryHoverBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundPressed" ResourceKey="PrimaryPressedBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemBackgroundFocused" ResourceKey="MaterialTopTabBarItemPrimaryFocusedBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForeground" ResourceKey="OnSurfaceMediumBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundPointerOver" ResourceKey="OnSurfaceMediumBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundPressed" ResourceKey="OnSurfaceMediumBrush" />
  <StaticResource x:Key="MaterialTopTabBarItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <SolidColorBrush x:Key="MaterialTopTabBarItemPrimaryFocusedBrush" Opacity="0.3" Color="{ThemeResource PrimaryColor}" />
  <StaticResource x:Key="MaterialTopTabBarItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <x:Double x:Key="MaterialTopTabBarFontSize">14</x:Double>
  <x:Double x:Key="MaterialTopTabBarHeight">48</x:Double>
  <x:Double x:Key="MaterialTopTabBarItemIconHeight">20</x:Double>
  <x:Double x:Key="MaterialTopTabBarItemIconWidth">20</x:Double>
  <Thickness x:Key="MaterialTopTabBarItemContentMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopTabBarItemContentOnlyMargin">12,0</Thickness>
  <mobile:Style x:Key="MaterialTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="utu:SafeArea.Insets" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter x:Name="SelectionIndicatorPresenter" Height="2" VerticalAlignment="Bottom" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Opacity="0" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="SelectionIndicatorRect" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" Height="2" Margin="0,0,0,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutomationProperties.AutomationId="SelectionIndicatorRect" Background="{ThemeResource MaterialTopTabBarIndicator}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="utu:SafeArea.Insets" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter x:Name="SelectionIndicatorPresenter" Height="2" VerticalAlignment="Bottom" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Opacity="0" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="SelectionIndicatorRect" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" Height="2" Margin="0,0,0,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutomationProperties.AutomationId="SelectionIndicatorRect" Background="{ThemeResource MaterialTopTabBarIndicator}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <mobile:Style x:Key="MaterialTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialTopTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundFocused}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{ThemeResource PrimaryBrush}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid" ColumnSpacing="8">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Width="{StaticResource MaterialTopTabBarItemIconWidth}" Height="{StaticResource MaterialTopTabBarItemIconHeight}">
                      <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{StaticResource MaterialTopTabBarItemContentMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialTopTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopTabBarItemBackgroundFocused}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialTopTabBarItemBackgroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{ThemeResource PrimaryBrush}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid" ColumnSpacing="8">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Width="{StaticResource MaterialTopTabBarItemIconWidth}" Height="{StaticResource MaterialTopTabBarItemIconHeight}">
                      <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{StaticResource MaterialTopTabBarItemContentMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <StaticResource x:Key="MaterialColoredTopTabBarBackground" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarIndicator" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundSelectedPointerOver" ResourceKey="OnPrimaryHoverBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundSelectedPressed" ResourceKey="OnPrimaryPressedBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundSelectedFocused" ResourceKey="MaterialColoredTopTabBarItemOnPrimaryFocusedBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundSelected" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundSelectedPointerOver" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundSelectedPressed" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundSelectedFocused" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundPointerOver" ResourceKey="OnPrimaryHoverBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundPressed" ResourceKey="OnPrimaryPressedBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBackgroundFocused" ResourceKey="MaterialColoredTopTabBarItemOnPrimaryFocusedBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForeground" ResourceKey="MaterialColoredTopTabBarItemOnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundPointerOver" ResourceKey="MaterialColoredTopTabBarItemOnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundPressed" ResourceKey="MaterialColoredTopTabBarItemOnPrimaryBrush" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <SolidColorBrush x:Key="MaterialColoredTopTabBarItemOnPrimaryFocusedBrush" Opacity="0.30" Color="{ThemeResource OnPrimaryColor}" />
  <SolidColorBrush x:Key="MaterialColoredTopTabBarItemOnPrimaryBrush" Opacity="0.60" Color="{ThemeResource OnPrimaryColor}" />
  <StaticResource x:Key="MaterialColoredTopTabBarItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <x:Double x:Key="MaterialColoredTopTabBarFontSize">14</x:Double>
  <x:Double x:Key="MaterialColoredTopTabBarHeight">48</x:Double>
  <x:Double x:Key="MaterialColoredTopTabBarItemIconHeight">20</x:Double>
  <x:Double x:Key="MaterialColoredTopTabBarItemIconWidth">20</x:Double>
  <Thickness x:Key="MaterialColoredTopTabBarItemContentMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialColoredTopTabBarItemContentOnlyMargin">12,0</Thickness>
  <mobile:Style x:Key="MaterialColoredTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialColoredTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="utu:SafeArea.Insets" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialColoredTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialColoredTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter x:Name="SelectionIndicatorPresenter" Height="2" VerticalAlignment="Bottom" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Opacity="0" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="SelectionIndicatorRect" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" Height="2" Margin="0,0,0,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutomationProperties.AutomationId="SelectionIndicatorRect" Background="{ThemeResource MaterialColoredTopTabBarIndicator}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialColoredTopTabBarStyle" TargetType="utu:TabBar">
    <Setter Property="Background" Value="{StaticResource MaterialColoredTopTabBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="toolkit:VisibleBoundsPadding.PaddingMask" Value="Top" />
    <Setter Property="Height" Value="{StaticResource MaterialColoredTopTabBarHeight}" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialColoredTopTabBarItemStyle}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <utu:TabBarListPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBar">
          <Grid x:Name="TabBarGrid" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter Padding="{TemplateBinding Padding}" />
            <utu:TabBarSelectionIndicatorPresenter x:Name="SelectionIndicatorPresenter" Height="2" VerticalAlignment="Bottom" AutomationProperties.AutomationId="SelectionIndicatorPresenter" IndicatorTransitionMode="Snap" Opacity="0" Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="SelectionIndicatorRect" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SelectionIndicatorWidth}" Height="2" Margin="0,0,0,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutomationProperties.AutomationId="SelectionIndicatorRect" Background="{ThemeResource MaterialColoredTopTabBarIndicator}" />
            </utu:TabBarSelectionIndicatorPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <mobile:Style x:Key="MaterialColoredTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialColoredTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialColoredTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialColoredTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundFocused}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{ThemeResource OnPrimaryBrush}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid" ColumnSpacing="8">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Width="{StaticResource MaterialColoredTopTabBarItemIconWidth}" Height="{StaticResource MaterialColoredTopTabBarItemIconHeight}">
                      <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{StaticResource MaterialColoredTopTabBarItemContentMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </mobile:Style>
  <not_mobile:Style x:Key="MaterialColoredTopTabBarItemStyle" TargetType="utu:TabBarItem">
    <Setter Property="Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialColoredTopTabBarItemBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialColoredTopTabBarFontSize}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="utu:TabBarItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundFocused}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialColoredTopTabBarItemBackgroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialColoredTopTabBarItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabBarIconPositionStates">
                <VisualState x:Name="IconOnTop" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{StaticResource MaterialColoredTopTabBarItemContentOnlyMargin}" />
                    <Setter Target="IconRow.Width" Value="0" />
                    <Setter Target="ContentRow.Width" Value="*" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <um:Ripple x:Name="RippleControl" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{ThemeResource OnPrimaryBrush}" FeedbackOpacity="{StaticResource PressedOpacity}">
              <um:Ripple.Content>
                <Grid>
                  <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
                  <Grid x:Name="ContentGrid" ColumnSpacing="8">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition x:Name="IconRow" Width="*" />
                      <ColumnDefinition x:Name="ContentRow" Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Viewbox x:Name="IconBox" Width="{StaticResource MaterialColoredTopTabBarItemIconWidth}" Height="{StaticResource MaterialColoredTopTabBarItemIconHeight}">
                      <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                    </Viewbox>
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{StaticResource MaterialColoredTopTabBarItemContentMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" />
                  </Grid>
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <!--origin: Styles\Controls\v2\_Common.xaml-->
</ResourceDictionary>